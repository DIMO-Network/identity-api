// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DIMO-Network/identity-api/graph (interfaces: ManufacturerRepository)
//
// Generated by this command:
//
//	mockgen -destination=./mock_manufacturer_test.go -package=graph github.com/DIMO-Network/identity-api/graph ManufacturerRepository
//

// Package graph is a generated GoMock package.
package graph

import (
	context "context"
	reflect "reflect"

	model "github.com/DIMO-Network/identity-api/graph/model"
	gomock "go.uber.org/mock/gomock"
)

// MockManufacturerRepository is a mock of ManufacturerRepository interface.
type MockManufacturerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockManufacturerRepositoryMockRecorder
	isgomock struct{}
}

// MockManufacturerRepositoryMockRecorder is the mock recorder for MockManufacturerRepository.
type MockManufacturerRepositoryMockRecorder struct {
	mock *MockManufacturerRepository
}

// NewMockManufacturerRepository creates a new mock instance.
func NewMockManufacturerRepository(ctrl *gomock.Controller) *MockManufacturerRepository {
	mock := &MockManufacturerRepository{ctrl: ctrl}
	mock.recorder = &MockManufacturerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManufacturerRepository) EXPECT() *MockManufacturerRepositoryMockRecorder {
	return m.recorder
}

// GetManufacturer mocks base method.
func (m *MockManufacturerRepository) GetManufacturer(ctx context.Context, by model.ManufacturerBy) (*model.Manufacturer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManufacturer", ctx, by)
	ret0, _ := ret[0].(*model.Manufacturer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManufacturer indicates an expected call of GetManufacturer.
func (mr *MockManufacturerRepositoryMockRecorder) GetManufacturer(ctx, by any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManufacturer", reflect.TypeOf((*MockManufacturerRepository)(nil).GetManufacturer), ctx, by)
}

// GetManufacturers mocks base method.
func (m *MockManufacturerRepository) GetManufacturers(ctx context.Context) (*model.ManufacturerConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManufacturers", ctx)
	ret0, _ := ret[0].(*model.ManufacturerConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetManufacturers indicates an expected call of GetManufacturers.
func (mr *MockManufacturerRepositoryMockRecorder) GetManufacturers(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManufacturers", reflect.TypeOf((*MockManufacturerRepository)(nil).GetManufacturers), ctx)
}
