// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DIMO-Network/identity-api/graph (interfaces: StakeRepository)
//
// Generated by this command:
//
//	mockgen -destination=./mock_stake_test.go -package=graph github.com/DIMO-Network/identity-api/graph StakeRepository
//

// Package graph is a generated GoMock package.
package graph

import (
	context "context"
	reflect "reflect"

	model "github.com/DIMO-Network/identity-api/graph/model"
	gomock "go.uber.org/mock/gomock"
)

// MockStakeRepository is a mock of StakeRepository interface.
type MockStakeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStakeRepositoryMockRecorder
	isgomock struct{}
}

// MockStakeRepositoryMockRecorder is the mock recorder for MockStakeRepository.
type MockStakeRepositoryMockRecorder struct {
	mock *MockStakeRepository
}

// NewMockStakeRepository creates a new mock instance.
func NewMockStakeRepository(ctrl *gomock.Controller) *MockStakeRepository {
	mock := &MockStakeRepository{ctrl: ctrl}
	mock.recorder = &MockStakeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStakeRepository) EXPECT() *MockStakeRepositoryMockRecorder {
	return m.recorder
}

// GetDeveloperStakes mocks base method.
func (m *MockStakeRepository) GetDeveloperStakes(ctx context.Context, first *int, after *string, last *int, before *string) (*model.StakeConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeveloperStakes", ctx, first, after, last, before)
	ret0, _ := ret[0].(*model.StakeConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeveloperStakes indicates an expected call of GetDeveloperStakes.
func (mr *MockStakeRepositoryMockRecorder) GetDeveloperStakes(ctx, first, after, last, before any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeveloperStakes", reflect.TypeOf((*MockStakeRepository)(nil).GetDeveloperStakes), ctx, first, after, last, before)
}
