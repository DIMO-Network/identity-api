// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DIMO-Network/identity-api/graph (interfaces: StakeRepository)
//
// Generated by this command:
//
//	mockgen -destination=./mock_stake_test.go -package=graph github.com/DIMO-Network/identity-api/graph StakeRepository
//

// Package graph is a generated GoMock package.
package graph

import (
	context "context"
	reflect "reflect"

	model "github.com/DIMO-Network/identity-api/graph/model"
	gomock "go.uber.org/mock/gomock"
)

// MockStakeRepository is a mock of StakeRepository interface.
type MockStakeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStakeRepositoryMockRecorder
	isgomock struct{}
}

// MockStakeRepositoryMockRecorder is the mock recorder for MockStakeRepository.
type MockStakeRepositoryMockRecorder struct {
	mock *MockStakeRepository
}

// NewMockStakeRepository creates a new mock instance.
func NewMockStakeRepository(ctrl *gomock.Controller) *MockStakeRepository {
	mock := &MockStakeRepository{ctrl: ctrl}
	mock.recorder = &MockStakeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStakeRepository) EXPECT() *MockStakeRepositoryMockRecorder {
	return m.recorder
}

// GetStakes mocks base method.
func (m *MockStakeRepository) GetStakes(ctx context.Context, first *int, after *string, last *int, before *string, filterBy *model.StakeFilterBy) (*model.StakeConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStakes", ctx, first, after, last, before, filterBy)
	ret0, _ := ret[0].(*model.StakeConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStakes indicates an expected call of GetStakes.
func (mr *MockStakeRepositoryMockRecorder) GetStakes(ctx, first, after, last, before, filterBy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStakes", reflect.TypeOf((*MockStakeRepository)(nil).GetStakes), ctx, first, after, last, before, filterBy)
}
