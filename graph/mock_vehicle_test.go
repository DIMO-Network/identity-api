// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DIMO-Network/identity-api/graph (interfaces: VehicleRepository)
//
// Generated by this command:
//
//	mockgen -destination=./mock_vehicle_test.go -package=graph github.com/DIMO-Network/identity-api/graph VehicleRepository
//

// Package graph is a generated GoMock package.
package graph

import (
	context "context"
	reflect "reflect"

	model "github.com/DIMO-Network/identity-api/graph/model"
	gomock "go.uber.org/mock/gomock"
)

// MockVehicleRepository is a mock of VehicleRepository interface.
type MockVehicleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVehicleRepositoryMockRecorder
}

// MockVehicleRepositoryMockRecorder is the mock recorder for MockVehicleRepository.
type MockVehicleRepositoryMockRecorder struct {
	mock *MockVehicleRepository
}

// NewMockVehicleRepository creates a new mock instance.
func NewMockVehicleRepository(ctrl *gomock.Controller) *MockVehicleRepository {
	mock := &MockVehicleRepository{ctrl: ctrl}
	mock.recorder = &MockVehicleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVehicleRepository) EXPECT() *MockVehicleRepositoryMockRecorder {
	return m.recorder
}

// GetVehicle mocks base method.
func (m *MockVehicleRepository) GetVehicle(arg0 context.Context, arg1 *int, arg2 *string) (*model.Vehicle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicle", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.Vehicle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicle indicates an expected call of GetVehicle.
func (mr *MockVehicleRepositoryMockRecorder) GetVehicle(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicle", reflect.TypeOf((*MockVehicleRepository)(nil).GetVehicle), arg0, arg1, arg2)
}

// GetVehicles mocks base method.
func (m *MockVehicleRepository) GetVehicles(arg0 context.Context, arg1 *int, arg2 *string, arg3 *int, arg4 *string, arg5 *model.VehiclesFilter) (*model.VehicleConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVehicles", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*model.VehicleConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVehicles indicates an expected call of GetVehicles.
func (mr *MockVehicleRepositoryMockRecorder) GetVehicles(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVehicles", reflect.TypeOf((*MockVehicleRepository)(nil).GetVehicles), arg0, arg1, arg2, arg3, arg4, arg5)
}
