// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DIMO-Network/identity-api/graph (interfaces: SyntheticRepository)
//
// Generated by this command:
//
//	mockgen -destination=./mock_synthetic_test.go -package=graph github.com/DIMO-Network/identity-api/graph SyntheticRepository
//

// Package graph is a generated GoMock package.
package graph

import (
	context "context"
	reflect "reflect"

	model "github.com/DIMO-Network/identity-api/graph/model"
	gomock "go.uber.org/mock/gomock"
)

// MockSyntheticRepository is a mock of SyntheticRepository interface.
type MockSyntheticRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSyntheticRepositoryMockRecorder
	isgomock struct{}
}

// MockSyntheticRepositoryMockRecorder is the mock recorder for MockSyntheticRepository.
type MockSyntheticRepositoryMockRecorder struct {
	mock *MockSyntheticRepository
}

// NewMockSyntheticRepository creates a new mock instance.
func NewMockSyntheticRepository(ctrl *gomock.Controller) *MockSyntheticRepository {
	mock := &MockSyntheticRepository{ctrl: ctrl}
	mock.recorder = &MockSyntheticRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyntheticRepository) EXPECT() *MockSyntheticRepositoryMockRecorder {
	return m.recorder
}

// GetSyntheticDevice mocks base method.
func (m *MockSyntheticRepository) GetSyntheticDevice(ctx context.Context, by model.SyntheticDeviceBy) (*model.SyntheticDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyntheticDevice", ctx, by)
	ret0, _ := ret[0].(*model.SyntheticDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyntheticDevice indicates an expected call of GetSyntheticDevice.
func (mr *MockSyntheticRepositoryMockRecorder) GetSyntheticDevice(ctx, by any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyntheticDevice", reflect.TypeOf((*MockSyntheticRepository)(nil).GetSyntheticDevice), ctx, by)
}

// GetSyntheticDevices mocks base method.
func (m *MockSyntheticRepository) GetSyntheticDevices(ctx context.Context, first, last *int, after, before *string, filterBy *model.SyntheticDevicesFilter) (*model.SyntheticDeviceConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyntheticDevices", ctx, first, last, after, before, filterBy)
	ret0, _ := ret[0].(*model.SyntheticDeviceConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyntheticDevices indicates an expected call of GetSyntheticDevices.
func (mr *MockSyntheticRepositoryMockRecorder) GetSyntheticDevices(ctx, first, last, after, before, filterBy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyntheticDevices", reflect.TypeOf((*MockSyntheticRepository)(nil).GetSyntheticDevices), ctx, first, last, after, before, filterBy)
}
