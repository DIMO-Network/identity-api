// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DIMO-Network/identity-api/graph (interfaces: SyntheticRepository)
//
// Generated by this command:
//
//	mockgen -destination=./mock_synthetic_test.go -package=graph github.com/DIMO-Network/identity-api/graph SyntheticRepository
//

// Package graph is a generated GoMock package.
package graph

import (
	context "context"
	reflect "reflect"

	model "github.com/DIMO-Network/identity-api/graph/model"
	gomock "go.uber.org/mock/gomock"
)

// MockSyntheticRepository is a mock of SyntheticRepository interface.
type MockSyntheticRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSyntheticRepositoryMockRecorder
}

// MockSyntheticRepositoryMockRecorder is the mock recorder for MockSyntheticRepository.
type MockSyntheticRepositoryMockRecorder struct {
	mock *MockSyntheticRepository
}

// NewMockSyntheticRepository creates a new mock instance.
func NewMockSyntheticRepository(ctrl *gomock.Controller) *MockSyntheticRepository {
	mock := &MockSyntheticRepository{ctrl: ctrl}
	mock.recorder = &MockSyntheticRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyntheticRepository) EXPECT() *MockSyntheticRepositoryMockRecorder {
	return m.recorder
}

// GetSyntheticDevice mocks base method.
func (m *MockSyntheticRepository) GetSyntheticDevice(arg0 context.Context, arg1 model.SyntheticDeviceBy) (*model.SyntheticDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyntheticDevice", arg0, arg1)
	ret0, _ := ret[0].(*model.SyntheticDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyntheticDevice indicates an expected call of GetSyntheticDevice.
func (mr *MockSyntheticRepositoryMockRecorder) GetSyntheticDevice(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyntheticDevice", reflect.TypeOf((*MockSyntheticRepository)(nil).GetSyntheticDevice), arg0, arg1)
}

// GetSyntheticDevices mocks base method.
func (m *MockSyntheticRepository) GetSyntheticDevices(arg0 context.Context, arg1, arg2 *int, arg3, arg4 *string, arg5 *model.SyntheticDevicesFilter) (*model.SyntheticDeviceConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSyntheticDevices", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*model.SyntheticDeviceConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSyntheticDevices indicates an expected call of GetSyntheticDevices.
func (mr *MockSyntheticRepositoryMockRecorder) GetSyntheticDevices(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSyntheticDevices", reflect.TypeOf((*MockSyntheticRepository)(nil).GetSyntheticDevices), arg0, arg1, arg2, arg3, arg4, arg5)
}
