// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DIMO-Network/identity-api/graph (interfaces: DCNRepository)
//
// Generated by this command:
//
//	mockgen -destination=./mock_dcn_test.go -package=graph github.com/DIMO-Network/identity-api/graph DCNRepository
//

// Package graph is a generated GoMock package.
package graph

import (
	context "context"
	reflect "reflect"

	model "github.com/DIMO-Network/identity-api/graph/model"
	gomock "go.uber.org/mock/gomock"
)

// MockDCNRepository is a mock of DCNRepository interface.
type MockDCNRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDCNRepositoryMockRecorder
}

// MockDCNRepositoryMockRecorder is the mock recorder for MockDCNRepository.
type MockDCNRepositoryMockRecorder struct {
	mock *MockDCNRepository
}

// NewMockDCNRepository creates a new mock instance.
func NewMockDCNRepository(ctrl *gomock.Controller) *MockDCNRepository {
	mock := &MockDCNRepository{ctrl: ctrl}
	mock.recorder = &MockDCNRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDCNRepository) EXPECT() *MockDCNRepositoryMockRecorder {
	return m.recorder
}

// GetDCN mocks base method.
func (m *MockDCNRepository) GetDCN(arg0 context.Context, arg1 model.DCNBy) (*model.Dcn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDCN", arg0, arg1)
	ret0, _ := ret[0].(*model.Dcn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDCN indicates an expected call of GetDCN.
func (mr *MockDCNRepositoryMockRecorder) GetDCN(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDCN", reflect.TypeOf((*MockDCNRepository)(nil).GetDCN), arg0, arg1)
}

// GetDCNByName mocks base method.
func (m *MockDCNRepository) GetDCNByName(arg0 context.Context, arg1 string) (*model.Dcn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDCNByName", arg0, arg1)
	ret0, _ := ret[0].(*model.Dcn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDCNByName indicates an expected call of GetDCNByName.
func (mr *MockDCNRepositoryMockRecorder) GetDCNByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDCNByName", reflect.TypeOf((*MockDCNRepository)(nil).GetDCNByName), arg0, arg1)
}

// GetDCNByNode mocks base method.
func (m *MockDCNRepository) GetDCNByNode(arg0 context.Context, arg1 []byte) (*model.Dcn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDCNByNode", arg0, arg1)
	ret0, _ := ret[0].(*model.Dcn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDCNByNode indicates an expected call of GetDCNByNode.
func (mr *MockDCNRepositoryMockRecorder) GetDCNByNode(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDCNByNode", reflect.TypeOf((*MockDCNRepository)(nil).GetDCNByNode), arg0, arg1)
}

// GetDCNs mocks base method.
func (m *MockDCNRepository) GetDCNs(arg0 context.Context, arg1 *int, arg2 *string, arg3 *int, arg4 *string, arg5 *model.DCNFilter) (*model.DCNConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDCNs", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(*model.DCNConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDCNs indicates an expected call of GetDCNs.
func (mr *MockDCNRepositoryMockRecorder) GetDCNs(arg0, arg1, arg2, arg3, arg4, arg5 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDCNs", reflect.TypeOf((*MockDCNRepository)(nil).GetDCNs), arg0, arg1, arg2, arg3, arg4, arg5)
}
