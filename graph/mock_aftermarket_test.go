// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DIMO-Network/identity-api/graph (interfaces: AftermarketDeviceRepository)
//
// Generated by this command:
//
//	mockgen -destination=./mock_aftermarket_test.go -package=graph github.com/DIMO-Network/identity-api/graph AftermarketDeviceRepository
//

// Package graph is a generated GoMock package.
package graph

import (
	context "context"
	reflect "reflect"

	model "github.com/DIMO-Network/identity-api/graph/model"
	gomock "go.uber.org/mock/gomock"
)

// MockAftermarketDeviceRepository is a mock of AftermarketDeviceRepository interface.
type MockAftermarketDeviceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAftermarketDeviceRepositoryMockRecorder
	isgomock struct{}
}

// MockAftermarketDeviceRepositoryMockRecorder is the mock recorder for MockAftermarketDeviceRepository.
type MockAftermarketDeviceRepositoryMockRecorder struct {
	mock *MockAftermarketDeviceRepository
}

// NewMockAftermarketDeviceRepository creates a new mock instance.
func NewMockAftermarketDeviceRepository(ctrl *gomock.Controller) *MockAftermarketDeviceRepository {
	mock := &MockAftermarketDeviceRepository{ctrl: ctrl}
	mock.recorder = &MockAftermarketDeviceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAftermarketDeviceRepository) EXPECT() *MockAftermarketDeviceRepositoryMockRecorder {
	return m.recorder
}

// GetAftermarketDevice mocks base method.
func (m *MockAftermarketDeviceRepository) GetAftermarketDevice(ctx context.Context, by model.AftermarketDeviceBy) (*model.AftermarketDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAftermarketDevice", ctx, by)
	ret0, _ := ret[0].(*model.AftermarketDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAftermarketDevice indicates an expected call of GetAftermarketDevice.
func (mr *MockAftermarketDeviceRepositoryMockRecorder) GetAftermarketDevice(ctx, by any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAftermarketDevice", reflect.TypeOf((*MockAftermarketDeviceRepository)(nil).GetAftermarketDevice), ctx, by)
}

// GetAftermarketDevices mocks base method.
func (m *MockAftermarketDeviceRepository) GetAftermarketDevices(ctx context.Context, first *int, after *string, last *int, before *string, filterBy *model.AftermarketDevicesFilter) (*model.AftermarketDeviceConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAftermarketDevices", ctx, first, after, last, before, filterBy)
	ret0, _ := ret[0].(*model.AftermarketDeviceConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAftermarketDevices indicates an expected call of GetAftermarketDevices.
func (mr *MockAftermarketDeviceRepositoryMockRecorder) GetAftermarketDevices(ctx, first, after, last, before, filterBy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAftermarketDevices", reflect.TypeOf((*MockAftermarketDeviceRepository)(nil).GetAftermarketDevices), ctx, first, after, last, before, filterBy)
}

// GetAftermarketDevicesForManufacturer mocks base method.
func (m *MockAftermarketDeviceRepository) GetAftermarketDevicesForManufacturer(ctx context.Context, obj *model.Manufacturer, first *int, after *string, last *int, before *string, filterBy *model.AftermarketDevicesFilter) (*model.AftermarketDeviceConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAftermarketDevicesForManufacturer", ctx, obj, first, after, last, before, filterBy)
	ret0, _ := ret[0].(*model.AftermarketDeviceConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAftermarketDevicesForManufacturer indicates an expected call of GetAftermarketDevicesForManufacturer.
func (mr *MockAftermarketDeviceRepositoryMockRecorder) GetAftermarketDevicesForManufacturer(ctx, obj, first, after, last, before, filterBy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAftermarketDevicesForManufacturer", reflect.TypeOf((*MockAftermarketDeviceRepository)(nil).GetAftermarketDevicesForManufacturer), ctx, obj, first, after, last, before, filterBy)
}
