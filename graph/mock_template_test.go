// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DIMO-Network/identity-api/graph (interfaces: TemplateRepository)
//
// Generated by this command:
//
//	mockgen -destination=./mock_template_test.go -package=graph github.com/DIMO-Network/identity-api/graph TemplateRepository
//

// Package graph is a generated GoMock package.
package graph

import (
	context "context"
	reflect "reflect"

	model "github.com/DIMO-Network/identity-api/graph/model"
	gomock "go.uber.org/mock/gomock"
)

// MockTemplateRepository is a mock of TemplateRepository interface.
type MockTemplateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTemplateRepositoryMockRecorder
	isgomock struct{}
}

// MockTemplateRepositoryMockRecorder is the mock recorder for MockTemplateRepository.
type MockTemplateRepositoryMockRecorder struct {
	mock *MockTemplateRepository
}

// NewMockTemplateRepository creates a new mock instance.
func NewMockTemplateRepository(ctrl *gomock.Controller) *MockTemplateRepository {
	mock := &MockTemplateRepository{ctrl: ctrl}
	mock.recorder = &MockTemplateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTemplateRepository) EXPECT() *MockTemplateRepositoryMockRecorder {
	return m.recorder
}

// GetTemplate mocks base method.
func (m *MockTemplateRepository) GetTemplate(ctx context.Context, by model.ConnectionBy) (*model.Template, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplate", ctx, by)
	ret0, _ := ret[0].(*model.Template)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplate indicates an expected call of GetTemplate.
func (mr *MockTemplateRepositoryMockRecorder) GetTemplate(ctx, by any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplate", reflect.TypeOf((*MockTemplateRepository)(nil).GetTemplate), ctx, by)
}

// GetTemplates mocks base method.
func (m *MockTemplateRepository) GetTemplates(ctx context.Context, first *int, after *string, last *int, before *string) (*model.TemplateConnection, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTemplates", ctx, first, after, last, before)
	ret0, _ := ret[0].(*model.TemplateConnection)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTemplates indicates an expected call of GetTemplates.
func (mr *MockTemplateRepositoryMockRecorder) GetTemplates(ctx, first, after, last, before any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTemplates", reflect.TypeOf((*MockTemplateRepository)(nil).GetTemplates), ctx, first, after, last, before)
}
