# Vehicle related types

extend type Query {
  """
  View a particular vehicle.
  """
  vehicle(
    """
    The token ID of the vehicle.
    """
    tokenId: Int
    """
    The DID of the vehicle.
    """
    tokenDID: String
  ): Vehicle!

  """
  List minted vehicles.

  For now, these are always ordered by token ID in descending order.
  """
  vehicles(
    """
    The number of vehicles to retrieve.
    Mutually exclusive with `last`.
    """
    first: Int
    """
    A cursor for pagination. Retrieve vehicles after this cursor.
    """
    after: String
    """
    The number of vehicles to retrieve from the end of the list.
    Mutually exclusive with `first`.
    """
    last: Int
    """
    A cursor for pagination. Retrieve vehicles before this cursor.
    """
    before: String
    """
    Filter the vehicles based on specific criteria.
    """
    filterBy: VehiclesFilter
  ): VehicleConnection!
}

"""
The VehiclesFilter input is used to specify filtering criteria for querying vehicles.
Vehicles must match all of the specified criteria.
"""
input VehiclesFilter {
  """
  Privileged filters for vehicles to which the given address has access. This includes vehicles
  that this address owns.
  """
  privileged: Address

  """
  Owner filters for vehicles that this address owns.
  """
  owner: Address

  """
  Make filters for vehicles that are of the given make.
  """
  make: String

  """
  Model filters for vehicles that are of the given model.
  """
  model: String

  """
  Year filters for vehicles that are of the given year.
  """
  year: Int

  """
  Filter for vehicles produced by a particular manufacturer, specified by manufacturer token id.
  """
  manufacturerTokenId: Int

  """
  Filter for vehicles by device definition id.
  """
  deviceDefinitionId: String
}

type Vehicle implements Node {
  """
  An opaque global identifier for this vehicle.
  """
  id: ID!
  """
  The ERC-721 token id for the vehicle.
  """
  tokenId: Int!
  """
  The DID for this vehicle's token ID in the format did:erc721:<chainID>:<contractAddress>:<tokenId>
  """
  tokenDID: String! @goField(name: "TokenDID")
  """
  The manufacturer of this vehicle.
  """
  manufacturer: Manufacturer!
  """
  The Ethereum address of the owner of this vehicle.
  """
  owner: Address!
  """
  The block timestamp at which this vehicle was minted.
  """
  mintedAt: Time!
  """
  The paired aftermarket device, if any.
  """
  aftermarketDevice: AftermarketDevice
  """
  A Relay-style connection listing any active privilege grants on this vehicle.
  """
  privileges(
    first: Int
    after: String
    last: Int
    before: String
    filterBy: PrivilegeFilterBy
  ): PrivilegesConnection!
  """
  A Relay-style connection listing any active SACD permission grants on this vehicle.
  """
  sacds(first: Int, after: String, last: Int, before: String): SacdConnection!
  """
  The paired synthetic device, if any.
  """
  syntheticDevice: SyntheticDevice
  """
  The device definition for this vehicle; which includes make, model, and year among
  other things.
  """
  definition: Definition
  dcn: DCN
  """
  Encoded name of the device
  """
  name: String!
  """
  A URI containing an image for the vehicle.
  """
  imageURI: String!
  image: String! @deprecated(reason: "Use `imageURI` instead.")

  earnings: VehicleEarnings

  dataURI: String!

  stake: Stake
  """
  Description of the storage node to which the vehicle's data should be sent.
  """
  storageNode: StorageNode
}

type Definition {
  id: String
  make: String
  model: String
  year: Int
}

"""
An edge in a VehicleConnection.
"""
type VehicleEdge {
  node: Vehicle!
  cursor: String!
}

"""
The Connection type for Vehicle.
"""
type VehicleConnection {
  totalCount: Int!
  edges: [VehicleEdge!]!
  nodes: [Vehicle!]!
  pageInfo: PageInfo!
}

type VehicleEarnings {
  totalTokens: BigDecimal!
  history(
    first: Int
    after: String
    last: Int
    before: String
  ): EarningsConnection!
}
