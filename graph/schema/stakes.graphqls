# DeviceDefinition related types

extend type Query {
  """
  List developer licenses. Sorts by token id, descending.
  """
  stakes(
    first: Int
    after: String
    last: Int
    before: String
    filterBy: StakeFilterBy
  ): StakeConnection!
}

input StakeFilterBy {
  owner: Address
  """
  Filter stakes based on attachability. A stake is considered attachable if it
  is not presently attached to a vehicle and has not yet ended.
  """
  attachable: Boolean
}

type Stake {
  """
  The token id of the license as an NFT.
  """
  tokenId: Int!
  """
  The DID for this stake's token ID in the format did:erc721:<chainID>:<contractAddress>:<tokenId>
  """
  tokenDID: String! @goField(name: "TokenDID")
  """
  The owner of the license. A single owner can own multiple licenses.
  """
  owner: Address!
  """
  The level of the stake. Presently, the levels are 0, 1, and 2. These translate
  to Levels 2, 3, and 4 in DIP-2. See https://docs.dimo.org/governance/improvement-proposals/dip2
  """
  level: Int!
  """
  The number of points that the stake contributes to a vehicle's weekly total. The process
  by which points become tokens is described in DIP-2.
  """
  points: Int!
  """
  The amount of $DIMO staked.
  """
  amount: BigDecimal!
  """
  The block timestamp for the transaction that created this stake.
  """
  stakedAt: Time!
  """
  The block timestamp after which the staked tokens will become or did become unlocked.
  """
  endsAt: Time!
  """
  The block timestamp at which the tokens were withdrawn, if they have been withdrawn.
  """
  withdrawnAt: Time
  """
  The vehicle to which the stake is attached, if it is attached.
  """
  vehicle: Vehicle
}

type StakeConnection {
  totalCount: Int!
  edges: [StakeEdge!]!
  nodes: [Stake!]!
  pageInfo: PageInfo!
}

type StakeEdge {
  node: Stake!
  cursor: String!
}
