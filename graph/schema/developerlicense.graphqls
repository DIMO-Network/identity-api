# DeviceDefinition related types

extend type Query {
  """
  List developer licenses. Sorts by token id, descending.
  """
  developerLicenses(
    first: Int
    after: String
    last: Int
    before: String
    filterBy: DeveloperLicenseFilterBy
  ): DeveloperLicenseConnection!

  """
  Retrieve a particular developer license.
  """
  developerLicense(by: DeveloperLicenseBy!): DeveloperLicense!
}

type DeveloperLicense {
  """
  The token id of the license as an NFT.
  """
  tokenId: Int!
  """
  The DID for this license's token ID in the format did:erc721:<chainID>:<contractAddress>:<tokenId>
  """
  tokenDID: String! @goField(name: "TokenDID")
  """
  The owner of the license. A single owner can own multiple licenses.
  """
  owner: Address!
  """
  Serves as the client id for OAuth as well as the address of the associated contract.
  """
  clientId: Address!
  """
  A human-readable alias for this license. Unique among all licenses if present.
  """
  alias: String
  """
  The block timestamp for the transaction that minted this license.
  """
  mintedAt: Time!
  signers(
    first: Int
    after: String
    last: Int
    before: String
  ): SignerConnection!
  redirectURIs(
    first: Int
    after: String
    last: Int
    before: String
  ): RedirectURIConnection!
}

type DeveloperLicenseConnection {
  totalCount: Int!
  edges: [DeveloperLicenseEdge!]!
  nodes: [DeveloperLicense!]!
  pageInfo: PageInfo!
}

input DeveloperLicenseFilterBy {
  signer: Address
  owner: Address
}

input DeveloperLicenseBy {
  clientId: Address
  alias: String
  tokenId: Int
  """
  The DID of the developer license in the format did:erc721:<chainID>:<contractAddress>:<tokenId>
  """
  tokenDID: String @goField(name: "TokenDID")
}

type DeveloperLicenseEdge {
  node: DeveloperLicense!
  cursor: String!
}

type Signer {
  address: Address!
  enabledAt: Time!
}

type RedirectURI {
  uri: String!
  enabledAt: Time!
}

type SignerConnection {
  totalCount: Int!
  edges: [SignerEdge!]!
  nodes: [Signer!]!
  pageInfo: PageInfo!
}

type SignerEdge {
  node: Signer!
  cursor: String!
}

type RedirectURIConnection {
  totalCount: Int!
  edges: [RedirectURIEdge!]!
  nodes: [RedirectURI!]!
  pageInfo: PageInfo!
}

type RedirectURIEdge {
  node: RedirectURI!
  cursor: String!
}
