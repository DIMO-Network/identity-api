"""
A point in time, encoded per RFC-3999.
"""
scalar Time

"""
A 20-byte Ethereum address, encoded as a hex string with 0x prefix and checksummed.
"""
scalar Address

"""
An integer of arbitrary precision, decimal-encoded. Typically a uint256.
"""
scalar BigInt

"""
A general byte representation
"""
scalar Bytes

directive @oneOf on INPUT_OBJECT

input DCNBy @oneOf {
  node: Bytes
  name: String
}

input AftermarketDeviceBy @oneOf {
  id: BigInt
  address: Address
  serial: String
}

input VehiclesFilter {
  privileged: Address
}

input AftermarketDevicesFilter {
  owner: Address
}

type Query {
  node(id: ID!): Node

  vehicles(
    first: Int
    after: String
    last: Int
    before: String
    filterBy: VehiclesFilter
  ): VehicleConnection!

  aftermarketDevices(
    first: Int
    after: String
    last: Int
    before: String
    filterBy: AftermarketDevicesFilter
  ): AftermarketDeviceConnection!

  vehicle(tokenId: BigInt!): Vehicle!

  aftermarketDevice(by: AftermarketDeviceBy!): AftermarketDevice!

  dcn(by: DCNBy!): DCN!
}

# Shared Types

interface Node {
  id: ID!
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

# Vehicles Types

type Vehicle implements Node {
  id: ID!
  tokenId: BigInt!
  owner: Address!
  mintedAt: Time!
  aftermarketDevice: AftermarketDevice
  privileges(
    first: Int
    after: String
    last: Int
    before: String
  ): PrivilegesConnection!
  syntheticDevice: SyntheticDevice
  definition: Definition
  dcn: DCN
}

type Definition {
  uri: String
  make: String
  model: String
  year: Int
}

type VehicleEdge {
  node: Vehicle!
  cursor: String!
}

type VehicleConnection {
  totalCount: Int!
  edges: [VehicleEdge!]!
  pageInfo: PageInfo!
}

# Aftermarket Types

type AftermarketDevice {
  id: ID!
  tokenId: BigInt!
  """
  The Ethereum address for the device.
  """
  address: Address!
  owner: Address!
  serial: String
  """
  The International Mobile Equipment Identity (IMEI) for the device.
  """
  imei: String
  """
  The time at which this device was minted.
  """
  mintedAt: Time!
  """
  The vehicle, if any, with which the device is paired.
  """
  vehicle: Vehicle
  """
  The beneficiary for this device, who receives any associated rewards. Defaults to the owner.
  """
  beneficiary: Address!
}

type AftermarketDeviceConnection {
  totalCount: Int!
  edges: [AftermarketDeviceEdge!]!
  pageInfo: PageInfo!
}

type AftermarketDeviceEdge {
  cursor: String!
  node: AftermarketDevice!
}

# Privileges Types

type Privilege {
  id: Int!
  """
  The user holding the privilege.
  """
  user: Address!
  """
  When this privilege was last set.
  """
  setAt: Time!
  """
  The time at which the privilege expires.
  """
  expiresAt: Time!
}

type PrivilegeEdge {
  node: Privilege!
  cursor: String!
}

type PrivilegesConnection {
  totalCount: Int!
  edges: [PrivilegeEdge!]!
  pageInfo: PageInfo!
}

# SyntheticDevice Types

type SyntheticDevice {
  id: BigInt!
  integrationId: BigInt!
  address: Address!
  mintedAt: Time!
}

type DCN {
  """
  The namehash of the domain.
  """
  node: Bytes!
  """
  ETH address of domain owner.
  """
  owner: Address!
  """
  The block timestamp at which the domain will cease to be valid.
  """
  expiresAt: Time
  """
  The block timestamp of when the domain was created.
  """
  mintedAt: Time!
  """
  Human readable name of the domain.
  """
  name: String
  """
  Device the domain is attached to.
  """
  vehicle: Vehicle
}
