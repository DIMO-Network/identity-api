"""
A point in time, encoded per RFC-3999. Typically these will be in second precision,
just like the blockchain, and in UTC.
"""
scalar Time

"""
A 20-byte Ethereum address, encoded as a checksummed hex string with 0x prefix.
"""
scalar Address

"""
An integer of arbitrary precision, decimal-encoded. Typically a uint256.
"""
scalar BigInt

"""
An array of byte, encoded as a lowercase hex string with 0x prefix.
"""
scalar Bytes

"""
This directive on an input object indicates that a client must specify one of the
fields of the object and no others. Typically used for lookups.
"""
directive @oneOf on INPUT_OBJECT

input DCNBy @oneOf {
  node: Bytes
  name: String
}

input PrivilegeFilterBy {
  user: Address
}

input AftermarketDeviceBy @oneOf {
  tokenId: Int
  address: Address
  serial: String
}

input VehiclesFilter {
  """
  Filter for vehicles to which the given address has access. This includes vehicles
  that this address owns.
  """
  privileged: Address
  owner: Address
}

input AftermarketDevicesFilter {
  """
  Filter for aftermarket devices owned by this address.
  """
  owner: Address
  beneficiary: Address
  manufacturerId: Int
}

type Query {
  node(id: ID!): Node

  """
  View a particular vehicle.
  """
  vehicle(tokenId: Int!): Vehicle!

  """
  List minted vehicles.

  For now, these are always ordered by token id, descending.
  """
  vehicles(
    first: Int
    after: String
    last: Int
    before: String
    """
    Restrict the vehicles that are shown.
    """
    filterBy: VehiclesFilter
  ): VehicleConnection!

  aftermarketDevice(by: AftermarketDeviceBy!): AftermarketDevice!

  """
  List aftermarket devices.

  For now, these are always ordered by token id, descending.
  """
  aftermarketDevices(
    first: Int
    after: String
    last: Int
    before: String
    filterBy: AftermarketDevicesFilter
  ): AftermarketDeviceConnection!

  dcn(by: DCNBy!): DCN!

  """
  List DIMO Canonical Names.
  Ordered by mint time, descending.
  """
  dcns(
    first: Int
    after: String
    last: Int
    before: String
    filterBy: DCNFilter
  ): DCNConnection!

  rewards(user: Address!): UserRewards

  manufacturer(by: ManufacturerBy!): Manufacturer!
}

# Shared Types

interface Node {
  id: ID!
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

type Manufacturer implements Node {
  """
  An opaque global identifier for this manufacturer.
  """
  id: ID!
  """
  The ERC-721 token id for the manufacturer.
  """
  tokenId: Int!
  """
  The name of the manufacturer.
  """
  name: String!
  """
  The Ethereum address of the owner of this manufacturer.
  """
  owner: Address!
  """
  The block timestamp at which this manufacturer was minted.
  """
  mintedAt: Time!
  """
  aftermarket devices associated with manufacturer
  """
  aftermarketDevices(
    first: Int
    after: String
    last: Int
    before: String
    filterBy: AftermarketDevicesFilter
  ): AftermarketDeviceConnection
}

# Vehicles Types

type Vehicle implements Node {
  """
  An opaque global identifier for this vehicle.
  """
  id: ID!
  """
  The ERC-721 token id for the vehicle.
  """
  tokenId: Int!
  """
  The manufacturer of this vehicle.
  """
  manufacturer: Manufacturer
  """
  The Ethereum address of the owner of this vehicle.
  """
  owner: Address!
  """
  The block timestamp at which this vehicle was minted.
  """
  mintedAt: Time!
  """
  The paired aftermarket device, if any.
  """
  aftermarketDevice: AftermarketDevice
  """
  A Relay-style connection listing any active privilege grants on this vehicle.
  """
  privileges(
    first: Int
    after: String
    last: Int
    before: String
    filterBy: PrivilegeFilterBy
  ): PrivilegesConnection!
  """
  The paired synthetic device, if any.
  """
  syntheticDevice: SyntheticDevice
  """
  The device definition for this vehicle; which includes make, model, and year among
  other things.
  """
  definition: Definition
  dcn: DCN
  name: String!
  """
  The Image Url of he vehicle
  """
  image: String!

  earnings: VehicleEarnings
}

type Definition {
  uri: String
  make: String
  model: String
  year: Int
}

type VehicleEdge {
  node: Vehicle!
  cursor: String!
}

type VehicleConnection {
  totalCount: Int!
  edges: [VehicleEdge!]!
  nodes: [Vehicle!]!
  pageInfo: PageInfo!
}

type VehicleEarnings {
  totalTokens: BigInt!
  history(
    first: Int
    after: String
    last: Int
    before: String
  ): EarningsConnection!
}

type AftermarketDeviceEarnings {
  totalTokens: BigInt!
  history(
    first: Int
    after: String
    last: Int
    before: String
  ): EarningsConnection!
}

# Aftermarket Types

type AftermarketDevice implements Node {
  """
  An opaque global identifier for this aftermarket device.
  """
  id: ID!
  """
  The ERC-721 token id for the device.
  """
  tokenId: Int!
  """
  The manufacturer of this aftermarket device.
  """
  manufacturer: Manufacturer
  """
  The Ethereum address for the device.
  """
  address: Address!
  """
  The Ethereum address of the owner of the device.
  """
  owner: Address!
  """
  The serial number on the side of the device. For AutoPis this is a UUID; for Macarons it is
  a long decimal number.
  """
  serial: String
  """
  The International Mobile Equipment Identity (IMEI) for the device.
  """
  imei: String
  """
  The block timestamp at which this device was minted.
  """
  mintedAt: Time!
  """
  The block timestamp at which this device was claimed, if it has been claimed. Devices must be
  claimed before pairing.
  """
  claimedAt: Time
  """
  The vehicle, if any, with which the device is paired.
  """
  vehicle: Vehicle
  """
  The beneficiary for this device, who receives any associated rewards. Defaults to the owner.
  """
  beneficiary: Address!

  name: String!
  """
  The Image Url of the device
  """
  image: String!
  """
  The earnings attached to the aftermarket device
  """
  earnings: AftermarketDeviceEarnings
}

type AftermarketDeviceConnection {
  totalCount: Int!
  edges: [AftermarketDeviceEdge!]!
  nodes: [AftermarketDevice!]!
  pageInfo: PageInfo!
}

type AftermarketDeviceEdge {
  cursor: String!
  node: AftermarketDevice!
}

# Privileges Types

type Privilege {
  id: Int!
  """
  The user holding the privilege.
  """
  user: Address!
  """
  When this privilege was last set for this user.
  """
  setAt: Time!
  """
  The block timestamp at which the privilege expires.
  """
  expiresAt: Time!
}

type PrivilegeEdge {
  node: Privilege!
  cursor: String!
}

type PrivilegesConnection {
  totalCount: Int!
  edges: [PrivilegeEdge!]!
  nodes: [Privilege!]!
  pageInfo: PageInfo!
}

# SyntheticDevice Types

type SyntheticDevice {
  tokenId: Int!
  integrationId: Int!
  address: Address!
  mintedAt: Time!
}

"""
Represents a DIMO Canonical Name. Typically these are human-readable labels for
vehicles.
"""
type DCN {
  """
  The namehash of the domain.
  """
  node: Bytes!
  """
  Ethereum address of domain owner.
  """
  owner: Address!
  """
  The block timestamp at which the domain will cease to be valid.
  """
  expiresAt: Time
  """
  The block timestamp at which the domain was created.
  """
  mintedAt: Time!
  """
  Human readable name, if any, for the domain; for example, "reddy.dimo".
  """
  name: String
  """
  Vehicle, if any, to which the domain is attached.
  """
  vehicle: Vehicle
}

type DCNEdge {
  cursor: String!
  node: DCN!
}

type DCNConnection {
  totalCount: Int!
  edges: [DCNEdge!]!
  nodes: [DCN!]!
  pageInfo: PageInfo!
}

input DCNFilter {
  """
  Filter for DCN owned by this address.
  """
  owner: Address
}

# Rewards Types

type Earnings {
  earnedTokens: BigInt!
  earningsTransfers(first: Int): EarningsConnection!
}

type Earning {
  """
  Week reward was issued
  """
  week: Int!
  """
  Address of Beneficiary that received reward
  """
  beneficiary: Address!
  """
  Consecutive period of which vehicle was connected
  """
  connectionStreak: Int
  """
  Tokens earned for connection period
  """
  streakTokens: BigInt!
  """
  AftermarketDevice connected to vehicle
  """
  aftermarketDevice: AftermarketDevice
  """
  Tokens earned by aftermarketDevice
  """
  aftermarketDeviceTokens: BigInt!
  """
  SyntheticDevice connected to vehicle
  """
  syntheticDevice: SyntheticDevice
  """
  Tokens earned by SyntheticDevice
  """
  syntheticDeviceTokens: BigInt!
  """
  Vehicle reward is assigned to
  """
  vehicle: Vehicle
  """
  When the token was earned
  """
  sentAt: Time!
}

type EarningsEdge {
  node: Earning!
  cursor: String!
}

type EarningsConnection {
  totalCount: Int!
  edges: [EarningsEdge!]!
  nodes: [Earning!]!
  pageInfo: PageInfo!
}

type UserRewards {
  totalTokens: BigInt!
  history(
    first: Int
    after: String
    last: Int
    before: String
  ): EarningsConnection!
}

input ManufacturerBy @oneOf {
  name: String
  tokenId: Int
}
