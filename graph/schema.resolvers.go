package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"context"
	"errors"

	"github.com/DIMO-Network/identity-api/graph/model"
	"github.com/DIMO-Network/identity-api/internal/loader"
	"github.com/ethereum/go-ethereum/common"
)

// Vehicle is the resolver for the vehicle field.
func (r *aftermarketDeviceResolver) Vehicle(ctx context.Context, obj *model.AftermarketDevice) (*model.Vehicle, error) {
	if obj.VehicleID == nil {
		return nil, nil
	}
	return loader.GetVehicleByID(ctx, *obj.VehicleID)
}

// Vehicle is the resolver for the vehicle field.
func (r *dCNResolver) Vehicle(ctx context.Context, obj *model.Dcn) (*model.Vehicle, error) {
	if obj.VehicleID == nil {
		return nil, nil
	}
	return loader.GetVehicleByID(ctx, *obj.VehicleID)
}

// AccessibleVehicles is the resolver for the accessibleVehicles field.
func (r *queryResolver) AccessibleVehicles(ctx context.Context, address common.Address, first *int, after *string, last *int, before *string) (*model.VehicleConnection, error) {
	return r.Repo.GetAccessibleVehicles(ctx, address, first, after, last, before)
}

// OwnedAftermarketDevices is the resolver for the ownedAftermarketDevices field.
func (r *queryResolver) OwnedAftermarketDevices(ctx context.Context, address common.Address, first *int, after *string, last *int, before *string) (*model.AftermarketDeviceConnection, error) {
	return r.Repo.GetOwnedAftermarketDevices(ctx, address, first, after, last, before)
}

// Vehicle is the resolver for the vehicle field.
func (r *queryResolver) Vehicle(ctx context.Context, id int) (*model.Vehicle, error) {
	return r.Repo.GetVehicle(ctx, id)
}

// Dcn is the resolver for the dcn field.
func (r *queryResolver) Dcn(ctx context.Context, by model.DCNBy) (*model.Dcn, error) {
	if by.Name != nil && len(by.Node) > 0 {
		return nil, errors.New("provide one of Name or Node but not both")
	}

	if by.Name == nil && len(by.Node) == 0 {
		return nil, errors.New("provide either Name or Node")
	}

	if len(by.Node) > 0 && len(by.Node) < 32 {
		return nil, errors.New("invalid node provided")
	}

	if by.Name != nil {
		return r.Repo.GetDCNByName(ctx, *by.Name)
	}

	return r.Repo.GetDCNByNode(ctx, by.Node)
}

// AftermarketDevice is the resolver for the aftermarketDevice field.
func (r *vehicleResolver) AftermarketDevice(ctx context.Context, obj *model.Vehicle) (*model.AftermarketDevice, error) {
	return loader.GetAftermarketDeviceByVehicleID(ctx, obj.ID)
}

// Privileges is the resolver for the privileges field.
func (r *vehicleResolver) Privileges(ctx context.Context, obj *model.Vehicle, first *int, after *string, last *int, before *string) (*model.PrivilegesConnection, error) {
	return r.Repo.GetPrivilegesForVehicle(ctx, obj.ID, first, after, last, before)
}

// SyntheticDevice is the resolver for the syntheticDevice field.
func (r *vehicleResolver) SyntheticDevice(ctx context.Context, obj *model.Vehicle) (*model.SyntheticDevice, error) {
	return loader.GetSyntheticDeviceByVehicleID(ctx, obj.ID)
}

// Dcn is the resolver for the dcn field.
func (r *vehicleResolver) Dcn(ctx context.Context, obj *model.Vehicle) (*model.Dcn, error) {
	return loader.GetDCNByVehicleID(ctx, obj.ID)
}

// AftermarketDevice returns AftermarketDeviceResolver implementation.
func (r *Resolver) AftermarketDevice() AftermarketDeviceResolver {
	return &aftermarketDeviceResolver{r}
}

// DCN returns DCNResolver implementation.
func (r *Resolver) DCN() DCNResolver { return &dCNResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Vehicle returns VehicleResolver implementation.
func (r *Resolver) Vehicle() VehicleResolver { return &vehicleResolver{r} }

type aftermarketDeviceResolver struct{ *Resolver }
type dCNResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type vehicleResolver struct{ *Resolver }
