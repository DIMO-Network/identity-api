// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// StorageNode is an object representing the database table.
type StorageNode struct {
	ID       []byte    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Label    string    `boil:"label" json:"label" toml:"label" yaml:"label"`
	Address  []byte    `boil:"address" json:"address" toml:"address" yaml:"address"`
	Owner    []byte    `boil:"owner" json:"owner" toml:"owner" yaml:"owner"`
	URI      string    `boil:"uri" json:"uri" toml:"uri" yaml:"uri"`
	MintedAt time.Time `boil:"minted_at" json:"minted_at" toml:"minted_at" yaml:"minted_at"`

	R *storageNodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L storageNodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StorageNodeColumns = struct {
	ID       string
	Label    string
	Address  string
	Owner    string
	URI      string
	MintedAt string
}{
	ID:       "id",
	Label:    "label",
	Address:  "address",
	Owner:    "owner",
	URI:      "uri",
	MintedAt: "minted_at",
}

var StorageNodeTableColumns = struct {
	ID       string
	Label    string
	Address  string
	Owner    string
	URI      string
	MintedAt string
}{
	ID:       "storage_nodes.id",
	Label:    "storage_nodes.label",
	Address:  "storage_nodes.address",
	Owner:    "storage_nodes.owner",
	URI:      "storage_nodes.uri",
	MintedAt: "storage_nodes.minted_at",
}

// Generated where

var StorageNodeWhere = struct {
	ID       whereHelper__byte
	Label    whereHelperstring
	Address  whereHelper__byte
	Owner    whereHelper__byte
	URI      whereHelperstring
	MintedAt whereHelpertime_Time
}{
	ID:       whereHelper__byte{field: "\"identity_api\".\"storage_nodes\".\"id\""},
	Label:    whereHelperstring{field: "\"identity_api\".\"storage_nodes\".\"label\""},
	Address:  whereHelper__byte{field: "\"identity_api\".\"storage_nodes\".\"address\""},
	Owner:    whereHelper__byte{field: "\"identity_api\".\"storage_nodes\".\"owner\""},
	URI:      whereHelperstring{field: "\"identity_api\".\"storage_nodes\".\"uri\""},
	MintedAt: whereHelpertime_Time{field: "\"identity_api\".\"storage_nodes\".\"minted_at\""},
}

// StorageNodeRels is where relationship names are stored.
var StorageNodeRels = struct {
	Vehicles string
}{
	Vehicles: "Vehicles",
}

// storageNodeR is where relationships are stored.
type storageNodeR struct {
	Vehicles VehicleSlice `boil:"Vehicles" json:"Vehicles" toml:"Vehicles" yaml:"Vehicles"`
}

// NewStruct creates a new relationship struct
func (*storageNodeR) NewStruct() *storageNodeR {
	return &storageNodeR{}
}

func (o *StorageNode) GetVehicles() VehicleSlice {
	if o == nil {
		return nil
	}

	return o.R.GetVehicles()
}

func (r *storageNodeR) GetVehicles() VehicleSlice {
	if r == nil {
		return nil
	}

	return r.Vehicles
}

// storageNodeL is where Load methods for each relationship are stored.
type storageNodeL struct{}

var (
	storageNodeAllColumns            = []string{"id", "label", "address", "owner", "uri", "minted_at"}
	storageNodeColumnsWithoutDefault = []string{"id", "label", "address", "owner", "uri", "minted_at"}
	storageNodeColumnsWithDefault    = []string{}
	storageNodePrimaryKeyColumns     = []string{"id"}
	storageNodeGeneratedColumns      = []string{}
)

type (
	// StorageNodeSlice is an alias for a slice of pointers to StorageNode.
	// This should almost always be used instead of []StorageNode.
	StorageNodeSlice []*StorageNode
	// StorageNodeHook is the signature for custom StorageNode hook methods
	StorageNodeHook func(context.Context, boil.ContextExecutor, *StorageNode) error

	storageNodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	storageNodeType                 = reflect.TypeOf(&StorageNode{})
	storageNodeMapping              = queries.MakeStructMapping(storageNodeType)
	storageNodePrimaryKeyMapping, _ = queries.BindMapping(storageNodeType, storageNodeMapping, storageNodePrimaryKeyColumns)
	storageNodeInsertCacheMut       sync.RWMutex
	storageNodeInsertCache          = make(map[string]insertCache)
	storageNodeUpdateCacheMut       sync.RWMutex
	storageNodeUpdateCache          = make(map[string]updateCache)
	storageNodeUpsertCacheMut       sync.RWMutex
	storageNodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var storageNodeAfterSelectMu sync.Mutex
var storageNodeAfterSelectHooks []StorageNodeHook

var storageNodeBeforeInsertMu sync.Mutex
var storageNodeBeforeInsertHooks []StorageNodeHook
var storageNodeAfterInsertMu sync.Mutex
var storageNodeAfterInsertHooks []StorageNodeHook

var storageNodeBeforeUpdateMu sync.Mutex
var storageNodeBeforeUpdateHooks []StorageNodeHook
var storageNodeAfterUpdateMu sync.Mutex
var storageNodeAfterUpdateHooks []StorageNodeHook

var storageNodeBeforeDeleteMu sync.Mutex
var storageNodeBeforeDeleteHooks []StorageNodeHook
var storageNodeAfterDeleteMu sync.Mutex
var storageNodeAfterDeleteHooks []StorageNodeHook

var storageNodeBeforeUpsertMu sync.Mutex
var storageNodeBeforeUpsertHooks []StorageNodeHook
var storageNodeAfterUpsertMu sync.Mutex
var storageNodeAfterUpsertHooks []StorageNodeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StorageNode) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storageNodeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StorageNode) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storageNodeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StorageNode) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storageNodeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StorageNode) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storageNodeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StorageNode) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storageNodeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StorageNode) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storageNodeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StorageNode) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storageNodeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StorageNode) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storageNodeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StorageNode) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range storageNodeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStorageNodeHook registers your hook function for all future operations.
func AddStorageNodeHook(hookPoint boil.HookPoint, storageNodeHook StorageNodeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		storageNodeAfterSelectMu.Lock()
		storageNodeAfterSelectHooks = append(storageNodeAfterSelectHooks, storageNodeHook)
		storageNodeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		storageNodeBeforeInsertMu.Lock()
		storageNodeBeforeInsertHooks = append(storageNodeBeforeInsertHooks, storageNodeHook)
		storageNodeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		storageNodeAfterInsertMu.Lock()
		storageNodeAfterInsertHooks = append(storageNodeAfterInsertHooks, storageNodeHook)
		storageNodeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		storageNodeBeforeUpdateMu.Lock()
		storageNodeBeforeUpdateHooks = append(storageNodeBeforeUpdateHooks, storageNodeHook)
		storageNodeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		storageNodeAfterUpdateMu.Lock()
		storageNodeAfterUpdateHooks = append(storageNodeAfterUpdateHooks, storageNodeHook)
		storageNodeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		storageNodeBeforeDeleteMu.Lock()
		storageNodeBeforeDeleteHooks = append(storageNodeBeforeDeleteHooks, storageNodeHook)
		storageNodeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		storageNodeAfterDeleteMu.Lock()
		storageNodeAfterDeleteHooks = append(storageNodeAfterDeleteHooks, storageNodeHook)
		storageNodeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		storageNodeBeforeUpsertMu.Lock()
		storageNodeBeforeUpsertHooks = append(storageNodeBeforeUpsertHooks, storageNodeHook)
		storageNodeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		storageNodeAfterUpsertMu.Lock()
		storageNodeAfterUpsertHooks = append(storageNodeAfterUpsertHooks, storageNodeHook)
		storageNodeAfterUpsertMu.Unlock()
	}
}

// One returns a single storageNode record from the query.
func (q storageNodeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StorageNode, error) {
	o := &StorageNode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for storage_nodes")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StorageNode records from the query.
func (q storageNodeQuery) All(ctx context.Context, exec boil.ContextExecutor) (StorageNodeSlice, error) {
	var o []*StorageNode

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to StorageNode slice")
	}

	if len(storageNodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StorageNode records in the query.
func (q storageNodeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count storage_nodes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q storageNodeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if storage_nodes exists")
	}

	return count > 0, nil
}

// Vehicles retrieves all the vehicle's Vehicles with an executor.
func (o *StorageNode) Vehicles(mods ...qm.QueryMod) vehicleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"identity_api\".\"vehicles\".\"storage_node_id\"=?", o.ID),
	)

	return Vehicles(queryMods...)
}

// LoadVehicles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (storageNodeL) LoadVehicles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStorageNode interface{}, mods queries.Applicator) error {
	var slice []*StorageNode
	var object *StorageNode

	if singular {
		var ok bool
		object, ok = maybeStorageNode.(*StorageNode)
		if !ok {
			object = new(StorageNode)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeStorageNode)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeStorageNode))
			}
		}
	} else {
		s, ok := maybeStorageNode.(*[]*StorageNode)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeStorageNode)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeStorageNode))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &storageNodeR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &storageNodeR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`identity_api.vehicles`),
		qm.WhereIn(`identity_api.vehicles.storage_node_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load vehicles")
	}

	var resultSlice []*Vehicle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice vehicles")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on vehicles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vehicles")
	}

	if len(vehicleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Vehicles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &vehicleR{}
			}
			foreign.R.StorageNode = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.StorageNodeID) {
				local.R.Vehicles = append(local.R.Vehicles, foreign)
				if foreign.R == nil {
					foreign.R = &vehicleR{}
				}
				foreign.R.StorageNode = local
				break
			}
		}
	}

	return nil
}

// AddVehicles adds the given related objects to the existing relationships
// of the storage_node, optionally inserting them as new records.
// Appends related to o.R.Vehicles.
// Sets related.R.StorageNode appropriately.
func (o *StorageNode) AddVehicles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Vehicle) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.StorageNodeID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"identity_api\".\"vehicles\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"storage_node_id"}),
				strmangle.WhereClause("\"", "\"", 2, vehiclePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.StorageNodeID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &storageNodeR{
			Vehicles: related,
		}
	} else {
		o.R.Vehicles = append(o.R.Vehicles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &vehicleR{
				StorageNode: o,
			}
		} else {
			rel.R.StorageNode = o
		}
	}
	return nil
}

// SetVehicles removes all previously related items of the
// storage_node replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.StorageNode's Vehicles accordingly.
// Replaces o.R.Vehicles with related.
// Sets related.R.StorageNode's Vehicles accordingly.
func (o *StorageNode) SetVehicles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Vehicle) error {
	query := "update \"identity_api\".\"vehicles\" set \"storage_node_id\" = null where \"storage_node_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Vehicles {
			queries.SetScanner(&rel.StorageNodeID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.StorageNode = nil
		}
		o.R.Vehicles = nil
	}

	return o.AddVehicles(ctx, exec, insert, related...)
}

// RemoveVehicles relationships from objects passed in.
// Removes related items from R.Vehicles (uses pointer comparison, removal does not keep order)
// Sets related.R.StorageNode.
func (o *StorageNode) RemoveVehicles(ctx context.Context, exec boil.ContextExecutor, related ...*Vehicle) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.StorageNodeID, nil)
		if rel.R != nil {
			rel.R.StorageNode = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("storage_node_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Vehicles {
			if rel != ri {
				continue
			}

			ln := len(o.R.Vehicles)
			if ln > 1 && i < ln-1 {
				o.R.Vehicles[i] = o.R.Vehicles[ln-1]
			}
			o.R.Vehicles = o.R.Vehicles[:ln-1]
			break
		}
	}

	return nil
}

// StorageNodes retrieves all the records using an executor.
func StorageNodes(mods ...qm.QueryMod) storageNodeQuery {
	mods = append(mods, qm.From("\"identity_api\".\"storage_nodes\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"identity_api\".\"storage_nodes\".*"})
	}

	return storageNodeQuery{q}
}

// FindStorageNode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStorageNode(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*StorageNode, error) {
	storageNodeObj := &StorageNode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"identity_api\".\"storage_nodes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, storageNodeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from storage_nodes")
	}

	if err = storageNodeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return storageNodeObj, err
	}

	return storageNodeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StorageNode) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no storage_nodes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storageNodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	storageNodeInsertCacheMut.RLock()
	cache, cached := storageNodeInsertCache[key]
	storageNodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			storageNodeAllColumns,
			storageNodeColumnsWithDefault,
			storageNodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(storageNodeType, storageNodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(storageNodeType, storageNodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"identity_api\".\"storage_nodes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"identity_api\".\"storage_nodes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into storage_nodes")
	}

	if !cached {
		storageNodeInsertCacheMut.Lock()
		storageNodeInsertCache[key] = cache
		storageNodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StorageNode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StorageNode) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	storageNodeUpdateCacheMut.RLock()
	cache, cached := storageNodeUpdateCache[key]
	storageNodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			storageNodeAllColumns,
			storageNodePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update storage_nodes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"identity_api\".\"storage_nodes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, storageNodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(storageNodeType, storageNodeMapping, append(wl, storageNodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update storage_nodes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for storage_nodes")
	}

	if !cached {
		storageNodeUpdateCacheMut.Lock()
		storageNodeUpdateCache[key] = cache
		storageNodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q storageNodeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for storage_nodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for storage_nodes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StorageNodeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storageNodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"identity_api\".\"storage_nodes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, storageNodePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in storageNode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all storageNode")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StorageNode) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no storage_nodes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(storageNodeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	storageNodeUpsertCacheMut.RLock()
	cache, cached := storageNodeUpsertCache[key]
	storageNodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			storageNodeAllColumns,
			storageNodeColumnsWithDefault,
			storageNodeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			storageNodeAllColumns,
			storageNodePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert storage_nodes, could not build update column list")
		}

		ret := strmangle.SetComplement(storageNodeAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(storageNodePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert storage_nodes, could not build conflict column list")
			}

			conflict = make([]string, len(storageNodePrimaryKeyColumns))
			copy(conflict, storageNodePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"identity_api\".\"storage_nodes\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(storageNodeType, storageNodeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(storageNodeType, storageNodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert storage_nodes")
	}

	if !cached {
		storageNodeUpsertCacheMut.Lock()
		storageNodeUpsertCache[key] = cache
		storageNodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StorageNode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StorageNode) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StorageNode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), storageNodePrimaryKeyMapping)
	sql := "DELETE FROM \"identity_api\".\"storage_nodes\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from storage_nodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for storage_nodes")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q storageNodeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no storageNodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from storage_nodes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for storage_nodes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StorageNodeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(storageNodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storageNodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"identity_api\".\"storage_nodes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storageNodePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from storageNode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for storage_nodes")
	}

	if len(storageNodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StorageNode) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStorageNode(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StorageNodeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StorageNodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), storageNodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"identity_api\".\"storage_nodes\".* FROM \"identity_api\".\"storage_nodes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, storageNodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StorageNodeSlice")
	}

	*o = slice

	return nil
}

// StorageNodeExists checks if the StorageNode row exists.
func StorageNodeExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"identity_api\".\"storage_nodes\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if storage_nodes exists")
	}

	return exists, nil
}

// Exists checks if the StorageNode row exists.
func (o *StorageNode) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return StorageNodeExists(ctx, exec, o.ID)
}
