// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AftermarketDevice is an object representing the database table.
type AftermarketDevice struct {
	ID             int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Address        []byte      `boil:"address" json:"address" toml:"address" yaml:"address"`
	Owner          []byte      `boil:"owner" json:"owner" toml:"owner" yaml:"owner"`
	Serial         null.String `boil:"serial" json:"serial,omitempty" toml:"serial" yaml:"serial,omitempty"`
	Imei           null.String `boil:"imei" json:"imei,omitempty" toml:"imei" yaml:"imei,omitempty"`
	MintedAt       time.Time   `boil:"minted_at" json:"minted_at" toml:"minted_at" yaml:"minted_at"`
	VehicleID      null.Int    `boil:"vehicle_id" json:"vehicle_id,omitempty" toml:"vehicle_id" yaml:"vehicle_id,omitempty"`
	Beneficiary    []byte      `boil:"beneficiary" json:"beneficiary" toml:"beneficiary" yaml:"beneficiary"`
	ManufacturerID null.Int    `boil:"manufacturer_id" json:"manufacturer_id,omitempty" toml:"manufacturer_id" yaml:"manufacturer_id,omitempty"`
	ClaimedAt      null.Time   `boil:"claimed_at" json:"claimed_at,omitempty" toml:"claimed_at" yaml:"claimed_at,omitempty"`
	DevEui         null.String `boil:"dev_eui" json:"dev_eui,omitempty" toml:"dev_eui" yaml:"dev_eui,omitempty"`

	R *aftermarketDeviceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L aftermarketDeviceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AftermarketDeviceColumns = struct {
	ID             string
	Address        string
	Owner          string
	Serial         string
	Imei           string
	MintedAt       string
	VehicleID      string
	Beneficiary    string
	ManufacturerID string
	ClaimedAt      string
	DevEui         string
}{
	ID:             "id",
	Address:        "address",
	Owner:          "owner",
	Serial:         "serial",
	Imei:           "imei",
	MintedAt:       "minted_at",
	VehicleID:      "vehicle_id",
	Beneficiary:    "beneficiary",
	ManufacturerID: "manufacturer_id",
	ClaimedAt:      "claimed_at",
	DevEui:         "dev_eui",
}

var AftermarketDeviceTableColumns = struct {
	ID             string
	Address        string
	Owner          string
	Serial         string
	Imei           string
	MintedAt       string
	VehicleID      string
	Beneficiary    string
	ManufacturerID string
	ClaimedAt      string
	DevEui         string
}{
	ID:             "aftermarket_devices.id",
	Address:        "aftermarket_devices.address",
	Owner:          "aftermarket_devices.owner",
	Serial:         "aftermarket_devices.serial",
	Imei:           "aftermarket_devices.imei",
	MintedAt:       "aftermarket_devices.minted_at",
	VehicleID:      "aftermarket_devices.vehicle_id",
	Beneficiary:    "aftermarket_devices.beneficiary",
	ManufacturerID: "aftermarket_devices.manufacturer_id",
	ClaimedAt:      "aftermarket_devices.claimed_at",
	DevEui:         "aftermarket_devices.dev_eui",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var AftermarketDeviceWhere = struct {
	ID             whereHelperint
	Address        whereHelper__byte
	Owner          whereHelper__byte
	Serial         whereHelpernull_String
	Imei           whereHelpernull_String
	MintedAt       whereHelpertime_Time
	VehicleID      whereHelpernull_Int
	Beneficiary    whereHelper__byte
	ManufacturerID whereHelpernull_Int
	ClaimedAt      whereHelpernull_Time
	DevEui         whereHelpernull_String
}{
	ID:             whereHelperint{field: "\"identity_api\".\"aftermarket_devices\".\"id\""},
	Address:        whereHelper__byte{field: "\"identity_api\".\"aftermarket_devices\".\"address\""},
	Owner:          whereHelper__byte{field: "\"identity_api\".\"aftermarket_devices\".\"owner\""},
	Serial:         whereHelpernull_String{field: "\"identity_api\".\"aftermarket_devices\".\"serial\""},
	Imei:           whereHelpernull_String{field: "\"identity_api\".\"aftermarket_devices\".\"imei\""},
	MintedAt:       whereHelpertime_Time{field: "\"identity_api\".\"aftermarket_devices\".\"minted_at\""},
	VehicleID:      whereHelpernull_Int{field: "\"identity_api\".\"aftermarket_devices\".\"vehicle_id\""},
	Beneficiary:    whereHelper__byte{field: "\"identity_api\".\"aftermarket_devices\".\"beneficiary\""},
	ManufacturerID: whereHelpernull_Int{field: "\"identity_api\".\"aftermarket_devices\".\"manufacturer_id\""},
	ClaimedAt:      whereHelpernull_Time{field: "\"identity_api\".\"aftermarket_devices\".\"claimed_at\""},
	DevEui:         whereHelpernull_String{field: "\"identity_api\".\"aftermarket_devices\".\"dev_eui\""},
}

// AftermarketDeviceRels is where relationship names are stored.
var AftermarketDeviceRels = struct {
	Manufacturer            string
	Vehicle                 string
	AftermarketTokenRewards string
}{
	Manufacturer:            "Manufacturer",
	Vehicle:                 "Vehicle",
	AftermarketTokenRewards: "AftermarketTokenRewards",
}

// aftermarketDeviceR is where relationships are stored.
type aftermarketDeviceR struct {
	Manufacturer            *Manufacturer `boil:"Manufacturer" json:"Manufacturer" toml:"Manufacturer" yaml:"Manufacturer"`
	Vehicle                 *Vehicle      `boil:"Vehicle" json:"Vehicle" toml:"Vehicle" yaml:"Vehicle"`
	AftermarketTokenRewards RewardSlice   `boil:"AftermarketTokenRewards" json:"AftermarketTokenRewards" toml:"AftermarketTokenRewards" yaml:"AftermarketTokenRewards"`
}

// NewStruct creates a new relationship struct
func (*aftermarketDeviceR) NewStruct() *aftermarketDeviceR {
	return &aftermarketDeviceR{}
}

func (r *aftermarketDeviceR) GetManufacturer() *Manufacturer {
	if r == nil {
		return nil
	}
	return r.Manufacturer
}

func (r *aftermarketDeviceR) GetVehicle() *Vehicle {
	if r == nil {
		return nil
	}
	return r.Vehicle
}

func (r *aftermarketDeviceR) GetAftermarketTokenRewards() RewardSlice {
	if r == nil {
		return nil
	}
	return r.AftermarketTokenRewards
}

// aftermarketDeviceL is where Load methods for each relationship are stored.
type aftermarketDeviceL struct{}

var (
	aftermarketDeviceAllColumns            = []string{"id", "address", "owner", "serial", "imei", "minted_at", "vehicle_id", "beneficiary", "manufacturer_id", "claimed_at", "dev_eui"}
	aftermarketDeviceColumnsWithoutDefault = []string{"id", "address", "owner", "minted_at", "beneficiary"}
	aftermarketDeviceColumnsWithDefault    = []string{"serial", "imei", "vehicle_id", "manufacturer_id", "claimed_at", "dev_eui"}
	aftermarketDevicePrimaryKeyColumns     = []string{"id"}
	aftermarketDeviceGeneratedColumns      = []string{}
)

type (
	// AftermarketDeviceSlice is an alias for a slice of pointers to AftermarketDevice.
	// This should almost always be used instead of []AftermarketDevice.
	AftermarketDeviceSlice []*AftermarketDevice
	// AftermarketDeviceHook is the signature for custom AftermarketDevice hook methods
	AftermarketDeviceHook func(context.Context, boil.ContextExecutor, *AftermarketDevice) error

	aftermarketDeviceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	aftermarketDeviceType                 = reflect.TypeOf(&AftermarketDevice{})
	aftermarketDeviceMapping              = queries.MakeStructMapping(aftermarketDeviceType)
	aftermarketDevicePrimaryKeyMapping, _ = queries.BindMapping(aftermarketDeviceType, aftermarketDeviceMapping, aftermarketDevicePrimaryKeyColumns)
	aftermarketDeviceInsertCacheMut       sync.RWMutex
	aftermarketDeviceInsertCache          = make(map[string]insertCache)
	aftermarketDeviceUpdateCacheMut       sync.RWMutex
	aftermarketDeviceUpdateCache          = make(map[string]updateCache)
	aftermarketDeviceUpsertCacheMut       sync.RWMutex
	aftermarketDeviceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var aftermarketDeviceAfterSelectMu sync.Mutex
var aftermarketDeviceAfterSelectHooks []AftermarketDeviceHook

var aftermarketDeviceBeforeInsertMu sync.Mutex
var aftermarketDeviceBeforeInsertHooks []AftermarketDeviceHook
var aftermarketDeviceAfterInsertMu sync.Mutex
var aftermarketDeviceAfterInsertHooks []AftermarketDeviceHook

var aftermarketDeviceBeforeUpdateMu sync.Mutex
var aftermarketDeviceBeforeUpdateHooks []AftermarketDeviceHook
var aftermarketDeviceAfterUpdateMu sync.Mutex
var aftermarketDeviceAfterUpdateHooks []AftermarketDeviceHook

var aftermarketDeviceBeforeDeleteMu sync.Mutex
var aftermarketDeviceBeforeDeleteHooks []AftermarketDeviceHook
var aftermarketDeviceAfterDeleteMu sync.Mutex
var aftermarketDeviceAfterDeleteHooks []AftermarketDeviceHook

var aftermarketDeviceBeforeUpsertMu sync.Mutex
var aftermarketDeviceBeforeUpsertHooks []AftermarketDeviceHook
var aftermarketDeviceAfterUpsertMu sync.Mutex
var aftermarketDeviceAfterUpsertHooks []AftermarketDeviceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AftermarketDevice) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AftermarketDevice) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AftermarketDevice) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AftermarketDevice) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AftermarketDevice) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AftermarketDevice) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AftermarketDevice) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AftermarketDevice) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AftermarketDevice) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range aftermarketDeviceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAftermarketDeviceHook registers your hook function for all future operations.
func AddAftermarketDeviceHook(hookPoint boil.HookPoint, aftermarketDeviceHook AftermarketDeviceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		aftermarketDeviceAfterSelectMu.Lock()
		aftermarketDeviceAfterSelectHooks = append(aftermarketDeviceAfterSelectHooks, aftermarketDeviceHook)
		aftermarketDeviceAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		aftermarketDeviceBeforeInsertMu.Lock()
		aftermarketDeviceBeforeInsertHooks = append(aftermarketDeviceBeforeInsertHooks, aftermarketDeviceHook)
		aftermarketDeviceBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		aftermarketDeviceAfterInsertMu.Lock()
		aftermarketDeviceAfterInsertHooks = append(aftermarketDeviceAfterInsertHooks, aftermarketDeviceHook)
		aftermarketDeviceAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		aftermarketDeviceBeforeUpdateMu.Lock()
		aftermarketDeviceBeforeUpdateHooks = append(aftermarketDeviceBeforeUpdateHooks, aftermarketDeviceHook)
		aftermarketDeviceBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		aftermarketDeviceAfterUpdateMu.Lock()
		aftermarketDeviceAfterUpdateHooks = append(aftermarketDeviceAfterUpdateHooks, aftermarketDeviceHook)
		aftermarketDeviceAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		aftermarketDeviceBeforeDeleteMu.Lock()
		aftermarketDeviceBeforeDeleteHooks = append(aftermarketDeviceBeforeDeleteHooks, aftermarketDeviceHook)
		aftermarketDeviceBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		aftermarketDeviceAfterDeleteMu.Lock()
		aftermarketDeviceAfterDeleteHooks = append(aftermarketDeviceAfterDeleteHooks, aftermarketDeviceHook)
		aftermarketDeviceAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		aftermarketDeviceBeforeUpsertMu.Lock()
		aftermarketDeviceBeforeUpsertHooks = append(aftermarketDeviceBeforeUpsertHooks, aftermarketDeviceHook)
		aftermarketDeviceBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		aftermarketDeviceAfterUpsertMu.Lock()
		aftermarketDeviceAfterUpsertHooks = append(aftermarketDeviceAfterUpsertHooks, aftermarketDeviceHook)
		aftermarketDeviceAfterUpsertMu.Unlock()
	}
}

// One returns a single aftermarketDevice record from the query.
func (q aftermarketDeviceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AftermarketDevice, error) {
	o := &AftermarketDevice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for aftermarket_devices")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AftermarketDevice records from the query.
func (q aftermarketDeviceQuery) All(ctx context.Context, exec boil.ContextExecutor) (AftermarketDeviceSlice, error) {
	var o []*AftermarketDevice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AftermarketDevice slice")
	}

	if len(aftermarketDeviceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AftermarketDevice records in the query.
func (q aftermarketDeviceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count aftermarket_devices rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q aftermarketDeviceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if aftermarket_devices exists")
	}

	return count > 0, nil
}

// Manufacturer pointed to by the foreign key.
func (o *AftermarketDevice) Manufacturer(mods ...qm.QueryMod) manufacturerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ManufacturerID),
	}

	queryMods = append(queryMods, mods...)

	return Manufacturers(queryMods...)
}

// Vehicle pointed to by the foreign key.
func (o *AftermarketDevice) Vehicle(mods ...qm.QueryMod) vehicleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VehicleID),
	}

	queryMods = append(queryMods, mods...)

	return Vehicles(queryMods...)
}

// AftermarketTokenRewards retrieves all the reward's Rewards with an executor via aftermarket_token_id column.
func (o *AftermarketDevice) AftermarketTokenRewards(mods ...qm.QueryMod) rewardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"identity_api\".\"rewards\".\"aftermarket_token_id\"=?", o.ID),
	)

	return Rewards(queryMods...)
}

// LoadManufacturer allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (aftermarketDeviceL) LoadManufacturer(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAftermarketDevice interface{}, mods queries.Applicator) error {
	var slice []*AftermarketDevice
	var object *AftermarketDevice

	if singular {
		var ok bool
		object, ok = maybeAftermarketDevice.(*AftermarketDevice)
		if !ok {
			object = new(AftermarketDevice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAftermarketDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAftermarketDevice))
			}
		}
	} else {
		s, ok := maybeAftermarketDevice.(*[]*AftermarketDevice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAftermarketDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAftermarketDevice))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &aftermarketDeviceR{}
		}
		if !queries.IsNil(object.ManufacturerID) {
			args[object.ManufacturerID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &aftermarketDeviceR{}
			}

			if !queries.IsNil(obj.ManufacturerID) {
				args[obj.ManufacturerID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`identity_api.manufacturers`),
		qm.WhereIn(`identity_api.manufacturers.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Manufacturer")
	}

	var resultSlice []*Manufacturer
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Manufacturer")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for manufacturers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for manufacturers")
	}

	if len(manufacturerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Manufacturer = foreign
		if foreign.R == nil {
			foreign.R = &manufacturerR{}
		}
		foreign.R.AftermarketDevices = append(foreign.R.AftermarketDevices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ManufacturerID, foreign.ID) {
				local.R.Manufacturer = foreign
				if foreign.R == nil {
					foreign.R = &manufacturerR{}
				}
				foreign.R.AftermarketDevices = append(foreign.R.AftermarketDevices, local)
				break
			}
		}
	}

	return nil
}

// LoadVehicle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (aftermarketDeviceL) LoadVehicle(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAftermarketDevice interface{}, mods queries.Applicator) error {
	var slice []*AftermarketDevice
	var object *AftermarketDevice

	if singular {
		var ok bool
		object, ok = maybeAftermarketDevice.(*AftermarketDevice)
		if !ok {
			object = new(AftermarketDevice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAftermarketDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAftermarketDevice))
			}
		}
	} else {
		s, ok := maybeAftermarketDevice.(*[]*AftermarketDevice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAftermarketDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAftermarketDevice))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &aftermarketDeviceR{}
		}
		if !queries.IsNil(object.VehicleID) {
			args[object.VehicleID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &aftermarketDeviceR{}
			}

			if !queries.IsNil(obj.VehicleID) {
				args[obj.VehicleID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`identity_api.vehicles`),
		qm.WhereIn(`identity_api.vehicles.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Vehicle")
	}

	var resultSlice []*Vehicle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Vehicle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for vehicles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vehicles")
	}

	if len(vehicleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Vehicle = foreign
		if foreign.R == nil {
			foreign.R = &vehicleR{}
		}
		foreign.R.AftermarketDevice = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.VehicleID, foreign.ID) {
				local.R.Vehicle = foreign
				if foreign.R == nil {
					foreign.R = &vehicleR{}
				}
				foreign.R.AftermarketDevice = local
				break
			}
		}
	}

	return nil
}

// LoadAftermarketTokenRewards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (aftermarketDeviceL) LoadAftermarketTokenRewards(ctx context.Context, e boil.ContextExecutor, singular bool, maybeAftermarketDevice interface{}, mods queries.Applicator) error {
	var slice []*AftermarketDevice
	var object *AftermarketDevice

	if singular {
		var ok bool
		object, ok = maybeAftermarketDevice.(*AftermarketDevice)
		if !ok {
			object = new(AftermarketDevice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeAftermarketDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeAftermarketDevice))
			}
		}
	} else {
		s, ok := maybeAftermarketDevice.(*[]*AftermarketDevice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeAftermarketDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeAftermarketDevice))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &aftermarketDeviceR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &aftermarketDeviceR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`identity_api.rewards`),
		qm.WhereIn(`identity_api.rewards.aftermarket_token_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load rewards")
	}

	var resultSlice []*Reward
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice rewards")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on rewards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for rewards")
	}

	if len(rewardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AftermarketTokenRewards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &rewardR{}
			}
			foreign.R.AftermarketToken = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.AftermarketTokenID) {
				local.R.AftermarketTokenRewards = append(local.R.AftermarketTokenRewards, foreign)
				if foreign.R == nil {
					foreign.R = &rewardR{}
				}
				foreign.R.AftermarketToken = local
				break
			}
		}
	}

	return nil
}

// SetManufacturer of the aftermarketDevice to the related item.
// Sets o.R.Manufacturer to related.
// Adds o to related.R.AftermarketDevices.
func (o *AftermarketDevice) SetManufacturer(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Manufacturer) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"identity_api\".\"aftermarket_devices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"manufacturer_id"}),
		strmangle.WhereClause("\"", "\"", 2, aftermarketDevicePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ManufacturerID, related.ID)
	if o.R == nil {
		o.R = &aftermarketDeviceR{
			Manufacturer: related,
		}
	} else {
		o.R.Manufacturer = related
	}

	if related.R == nil {
		related.R = &manufacturerR{
			AftermarketDevices: AftermarketDeviceSlice{o},
		}
	} else {
		related.R.AftermarketDevices = append(related.R.AftermarketDevices, o)
	}

	return nil
}

// RemoveManufacturer relationship.
// Sets o.R.Manufacturer to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AftermarketDevice) RemoveManufacturer(ctx context.Context, exec boil.ContextExecutor, related *Manufacturer) error {
	var err error

	queries.SetScanner(&o.ManufacturerID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("manufacturer_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Manufacturer = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.AftermarketDevices {
		if queries.Equal(o.ManufacturerID, ri.ManufacturerID) {
			continue
		}

		ln := len(related.R.AftermarketDevices)
		if ln > 1 && i < ln-1 {
			related.R.AftermarketDevices[i] = related.R.AftermarketDevices[ln-1]
		}
		related.R.AftermarketDevices = related.R.AftermarketDevices[:ln-1]
		break
	}
	return nil
}

// SetVehicle of the aftermarketDevice to the related item.
// Sets o.R.Vehicle to related.
// Adds o to related.R.AftermarketDevice.
func (o *AftermarketDevice) SetVehicle(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Vehicle) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"identity_api\".\"aftermarket_devices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"vehicle_id"}),
		strmangle.WhereClause("\"", "\"", 2, aftermarketDevicePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.VehicleID, related.ID)
	if o.R == nil {
		o.R = &aftermarketDeviceR{
			Vehicle: related,
		}
	} else {
		o.R.Vehicle = related
	}

	if related.R == nil {
		related.R = &vehicleR{
			AftermarketDevice: o,
		}
	} else {
		related.R.AftermarketDevice = o
	}

	return nil
}

// RemoveVehicle relationship.
// Sets o.R.Vehicle to nil.
// Removes o from all passed in related items' relationships struct.
func (o *AftermarketDevice) RemoveVehicle(ctx context.Context, exec boil.ContextExecutor, related *Vehicle) error {
	var err error

	queries.SetScanner(&o.VehicleID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("vehicle_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Vehicle = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	related.R.AftermarketDevice = nil
	return nil
}

// AddAftermarketTokenRewards adds the given related objects to the existing relationships
// of the aftermarket_device, optionally inserting them as new records.
// Appends related to o.R.AftermarketTokenRewards.
// Sets related.R.AftermarketToken appropriately.
func (o *AftermarketDevice) AddAftermarketTokenRewards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Reward) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.AftermarketTokenID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"identity_api\".\"rewards\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"aftermarket_token_id"}),
				strmangle.WhereClause("\"", "\"", 2, rewardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.IssuanceWeek, rel.VehicleID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.AftermarketTokenID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &aftermarketDeviceR{
			AftermarketTokenRewards: related,
		}
	} else {
		o.R.AftermarketTokenRewards = append(o.R.AftermarketTokenRewards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &rewardR{
				AftermarketToken: o,
			}
		} else {
			rel.R.AftermarketToken = o
		}
	}
	return nil
}

// SetAftermarketTokenRewards removes all previously related items of the
// aftermarket_device replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.AftermarketToken's AftermarketTokenRewards accordingly.
// Replaces o.R.AftermarketTokenRewards with related.
// Sets related.R.AftermarketToken's AftermarketTokenRewards accordingly.
func (o *AftermarketDevice) SetAftermarketTokenRewards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Reward) error {
	query := "update \"identity_api\".\"rewards\" set \"aftermarket_token_id\" = null where \"aftermarket_token_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AftermarketTokenRewards {
			queries.SetScanner(&rel.AftermarketTokenID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.AftermarketToken = nil
		}
		o.R.AftermarketTokenRewards = nil
	}

	return o.AddAftermarketTokenRewards(ctx, exec, insert, related...)
}

// RemoveAftermarketTokenRewards relationships from objects passed in.
// Removes related items from R.AftermarketTokenRewards (uses pointer comparison, removal does not keep order)
// Sets related.R.AftermarketToken.
func (o *AftermarketDevice) RemoveAftermarketTokenRewards(ctx context.Context, exec boil.ContextExecutor, related ...*Reward) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.AftermarketTokenID, nil)
		if rel.R != nil {
			rel.R.AftermarketToken = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("aftermarket_token_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AftermarketTokenRewards {
			if rel != ri {
				continue
			}

			ln := len(o.R.AftermarketTokenRewards)
			if ln > 1 && i < ln-1 {
				o.R.AftermarketTokenRewards[i] = o.R.AftermarketTokenRewards[ln-1]
			}
			o.R.AftermarketTokenRewards = o.R.AftermarketTokenRewards[:ln-1]
			break
		}
	}

	return nil
}

// AftermarketDevices retrieves all the records using an executor.
func AftermarketDevices(mods ...qm.QueryMod) aftermarketDeviceQuery {
	mods = append(mods, qm.From("\"identity_api\".\"aftermarket_devices\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"identity_api\".\"aftermarket_devices\".*"})
	}

	return aftermarketDeviceQuery{q}
}

// FindAftermarketDevice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAftermarketDevice(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*AftermarketDevice, error) {
	aftermarketDeviceObj := &AftermarketDevice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"identity_api\".\"aftermarket_devices\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, aftermarketDeviceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from aftermarket_devices")
	}

	if err = aftermarketDeviceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return aftermarketDeviceObj, err
	}

	return aftermarketDeviceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AftermarketDevice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no aftermarket_devices provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(aftermarketDeviceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	aftermarketDeviceInsertCacheMut.RLock()
	cache, cached := aftermarketDeviceInsertCache[key]
	aftermarketDeviceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			aftermarketDeviceAllColumns,
			aftermarketDeviceColumnsWithDefault,
			aftermarketDeviceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(aftermarketDeviceType, aftermarketDeviceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(aftermarketDeviceType, aftermarketDeviceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"identity_api\".\"aftermarket_devices\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"identity_api\".\"aftermarket_devices\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into aftermarket_devices")
	}

	if !cached {
		aftermarketDeviceInsertCacheMut.Lock()
		aftermarketDeviceInsertCache[key] = cache
		aftermarketDeviceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AftermarketDevice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AftermarketDevice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	aftermarketDeviceUpdateCacheMut.RLock()
	cache, cached := aftermarketDeviceUpdateCache[key]
	aftermarketDeviceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			aftermarketDeviceAllColumns,
			aftermarketDevicePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update aftermarket_devices, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"identity_api\".\"aftermarket_devices\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, aftermarketDevicePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(aftermarketDeviceType, aftermarketDeviceMapping, append(wl, aftermarketDevicePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update aftermarket_devices row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for aftermarket_devices")
	}

	if !cached {
		aftermarketDeviceUpdateCacheMut.Lock()
		aftermarketDeviceUpdateCache[key] = cache
		aftermarketDeviceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q aftermarketDeviceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for aftermarket_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for aftermarket_devices")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AftermarketDeviceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aftermarketDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"identity_api\".\"aftermarket_devices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, aftermarketDevicePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in aftermarketDevice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all aftermarketDevice")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AftermarketDevice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no aftermarket_devices provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(aftermarketDeviceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	aftermarketDeviceUpsertCacheMut.RLock()
	cache, cached := aftermarketDeviceUpsertCache[key]
	aftermarketDeviceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			aftermarketDeviceAllColumns,
			aftermarketDeviceColumnsWithDefault,
			aftermarketDeviceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			aftermarketDeviceAllColumns,
			aftermarketDevicePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert aftermarket_devices, could not build update column list")
		}

		ret := strmangle.SetComplement(aftermarketDeviceAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(aftermarketDevicePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert aftermarket_devices, could not build conflict column list")
			}

			conflict = make([]string, len(aftermarketDevicePrimaryKeyColumns))
			copy(conflict, aftermarketDevicePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"identity_api\".\"aftermarket_devices\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(aftermarketDeviceType, aftermarketDeviceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(aftermarketDeviceType, aftermarketDeviceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert aftermarket_devices")
	}

	if !cached {
		aftermarketDeviceUpsertCacheMut.Lock()
		aftermarketDeviceUpsertCache[key] = cache
		aftermarketDeviceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AftermarketDevice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AftermarketDevice) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AftermarketDevice provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), aftermarketDevicePrimaryKeyMapping)
	sql := "DELETE FROM \"identity_api\".\"aftermarket_devices\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from aftermarket_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for aftermarket_devices")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q aftermarketDeviceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no aftermarketDeviceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from aftermarket_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for aftermarket_devices")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AftermarketDeviceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(aftermarketDeviceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aftermarketDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"identity_api\".\"aftermarket_devices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, aftermarketDevicePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from aftermarketDevice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for aftermarket_devices")
	}

	if len(aftermarketDeviceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AftermarketDevice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAftermarketDevice(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AftermarketDeviceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AftermarketDeviceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), aftermarketDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"identity_api\".\"aftermarket_devices\".* FROM \"identity_api\".\"aftermarket_devices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, aftermarketDevicePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AftermarketDeviceSlice")
	}

	*o = slice

	return nil
}

// AftermarketDeviceExists checks if the AftermarketDevice row exists.
func AftermarketDeviceExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"identity_api\".\"aftermarket_devices\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if aftermarket_devices exists")
	}

	return exists, nil
}

// Exists checks if the AftermarketDevice row exists.
func (o *AftermarketDevice) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AftermarketDeviceExists(ctx, exec, o.ID)
}
