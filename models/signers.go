// Code generated by SQLBoiler 4.19.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Signer is an object representing the database table.
type Signer struct {
	DeveloperLicenseID int       `boil:"developer_license_id" json:"developer_license_id" toml:"developer_license_id" yaml:"developer_license_id"`
	Signer             []byte    `boil:"signer" json:"signer" toml:"signer" yaml:"signer"`
	EnabledAt          time.Time `boil:"enabled_at" json:"enabled_at" toml:"enabled_at" yaml:"enabled_at"`

	R *signerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L signerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SignerColumns = struct {
	DeveloperLicenseID string
	Signer             string
	EnabledAt          string
}{
	DeveloperLicenseID: "developer_license_id",
	Signer:             "signer",
	EnabledAt:          "enabled_at",
}

var SignerTableColumns = struct {
	DeveloperLicenseID string
	Signer             string
	EnabledAt          string
}{
	DeveloperLicenseID: "signers.developer_license_id",
	Signer:             "signers.signer",
	EnabledAt:          "signers.enabled_at",
}

// Generated where

var SignerWhere = struct {
	DeveloperLicenseID whereHelperint
	Signer             whereHelper__byte
	EnabledAt          whereHelpertime_Time
}{
	DeveloperLicenseID: whereHelperint{field: "\"identity_api\".\"signers\".\"developer_license_id\""},
	Signer:             whereHelper__byte{field: "\"identity_api\".\"signers\".\"signer\""},
	EnabledAt:          whereHelpertime_Time{field: "\"identity_api\".\"signers\".\"enabled_at\""},
}

// SignerRels is where relationship names are stored.
var SignerRels = struct {
	DeveloperLicense string
}{
	DeveloperLicense: "DeveloperLicense",
}

// signerR is where relationships are stored.
type signerR struct {
	DeveloperLicense *DeveloperLicense `boil:"DeveloperLicense" json:"DeveloperLicense" toml:"DeveloperLicense" yaml:"DeveloperLicense"`
}

// NewStruct creates a new relationship struct
func (*signerR) NewStruct() *signerR {
	return &signerR{}
}

func (o *Signer) GetDeveloperLicense() *DeveloperLicense {
	if o == nil {
		return nil
	}

	return o.R.GetDeveloperLicense()
}

func (r *signerR) GetDeveloperLicense() *DeveloperLicense {
	if r == nil {
		return nil
	}

	return r.DeveloperLicense
}

// signerL is where Load methods for each relationship are stored.
type signerL struct{}

var (
	signerAllColumns            = []string{"developer_license_id", "signer", "enabled_at"}
	signerColumnsWithoutDefault = []string{"developer_license_id", "signer", "enabled_at"}
	signerColumnsWithDefault    = []string{}
	signerPrimaryKeyColumns     = []string{"developer_license_id", "signer"}
	signerGeneratedColumns      = []string{}
)

type (
	// SignerSlice is an alias for a slice of pointers to Signer.
	// This should almost always be used instead of []Signer.
	SignerSlice []*Signer
	// SignerHook is the signature for custom Signer hook methods
	SignerHook func(context.Context, boil.ContextExecutor, *Signer) error

	signerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	signerType                 = reflect.TypeOf(&Signer{})
	signerMapping              = queries.MakeStructMapping(signerType)
	signerPrimaryKeyMapping, _ = queries.BindMapping(signerType, signerMapping, signerPrimaryKeyColumns)
	signerInsertCacheMut       sync.RWMutex
	signerInsertCache          = make(map[string]insertCache)
	signerUpdateCacheMut       sync.RWMutex
	signerUpdateCache          = make(map[string]updateCache)
	signerUpsertCacheMut       sync.RWMutex
	signerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var signerAfterSelectMu sync.Mutex
var signerAfterSelectHooks []SignerHook

var signerBeforeInsertMu sync.Mutex
var signerBeforeInsertHooks []SignerHook
var signerAfterInsertMu sync.Mutex
var signerAfterInsertHooks []SignerHook

var signerBeforeUpdateMu sync.Mutex
var signerBeforeUpdateHooks []SignerHook
var signerAfterUpdateMu sync.Mutex
var signerAfterUpdateHooks []SignerHook

var signerBeforeDeleteMu sync.Mutex
var signerBeforeDeleteHooks []SignerHook
var signerAfterDeleteMu sync.Mutex
var signerAfterDeleteHooks []SignerHook

var signerBeforeUpsertMu sync.Mutex
var signerBeforeUpsertHooks []SignerHook
var signerAfterUpsertMu sync.Mutex
var signerAfterUpsertHooks []SignerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Signer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range signerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Signer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range signerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Signer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range signerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Signer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range signerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Signer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range signerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Signer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range signerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Signer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range signerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Signer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range signerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Signer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range signerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSignerHook registers your hook function for all future operations.
func AddSignerHook(hookPoint boil.HookPoint, signerHook SignerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		signerAfterSelectMu.Lock()
		signerAfterSelectHooks = append(signerAfterSelectHooks, signerHook)
		signerAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		signerBeforeInsertMu.Lock()
		signerBeforeInsertHooks = append(signerBeforeInsertHooks, signerHook)
		signerBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		signerAfterInsertMu.Lock()
		signerAfterInsertHooks = append(signerAfterInsertHooks, signerHook)
		signerAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		signerBeforeUpdateMu.Lock()
		signerBeforeUpdateHooks = append(signerBeforeUpdateHooks, signerHook)
		signerBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		signerAfterUpdateMu.Lock()
		signerAfterUpdateHooks = append(signerAfterUpdateHooks, signerHook)
		signerAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		signerBeforeDeleteMu.Lock()
		signerBeforeDeleteHooks = append(signerBeforeDeleteHooks, signerHook)
		signerBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		signerAfterDeleteMu.Lock()
		signerAfterDeleteHooks = append(signerAfterDeleteHooks, signerHook)
		signerAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		signerBeforeUpsertMu.Lock()
		signerBeforeUpsertHooks = append(signerBeforeUpsertHooks, signerHook)
		signerBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		signerAfterUpsertMu.Lock()
		signerAfterUpsertHooks = append(signerAfterUpsertHooks, signerHook)
		signerAfterUpsertMu.Unlock()
	}
}

// One returns a single signer record from the query.
func (q signerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Signer, error) {
	o := &Signer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for signers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Signer records from the query.
func (q signerQuery) All(ctx context.Context, exec boil.ContextExecutor) (SignerSlice, error) {
	var o []*Signer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Signer slice")
	}

	if len(signerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Signer records in the query.
func (q signerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count signers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q signerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if signers exists")
	}

	return count > 0, nil
}

// DeveloperLicense pointed to by the foreign key.
func (o *Signer) DeveloperLicense(mods ...qm.QueryMod) developerLicenseQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.DeveloperLicenseID),
	}

	queryMods = append(queryMods, mods...)

	return DeveloperLicenses(queryMods...)
}

// LoadDeveloperLicense allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (signerL) LoadDeveloperLicense(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSigner interface{}, mods queries.Applicator) error {
	var slice []*Signer
	var object *Signer

	if singular {
		var ok bool
		object, ok = maybeSigner.(*Signer)
		if !ok {
			object = new(Signer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSigner)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSigner))
			}
		}
	} else {
		s, ok := maybeSigner.(*[]*Signer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSigner)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSigner))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &signerR{}
		}
		args[object.DeveloperLicenseID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &signerR{}
			}

			args[obj.DeveloperLicenseID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`identity_api.developer_licenses`),
		qm.WhereIn(`identity_api.developer_licenses.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load DeveloperLicense")
	}

	var resultSlice []*DeveloperLicense
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice DeveloperLicense")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for developer_licenses")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for developer_licenses")
	}

	if len(developerLicenseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeveloperLicense = foreign
		if foreign.R == nil {
			foreign.R = &developerLicenseR{}
		}
		foreign.R.Signers = append(foreign.R.Signers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeveloperLicenseID == foreign.ID {
				local.R.DeveloperLicense = foreign
				if foreign.R == nil {
					foreign.R = &developerLicenseR{}
				}
				foreign.R.Signers = append(foreign.R.Signers, local)
				break
			}
		}
	}

	return nil
}

// SetDeveloperLicense of the signer to the related item.
// Sets o.R.DeveloperLicense to related.
// Adds o to related.R.Signers.
func (o *Signer) SetDeveloperLicense(ctx context.Context, exec boil.ContextExecutor, insert bool, related *DeveloperLicense) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"identity_api\".\"signers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"developer_license_id"}),
		strmangle.WhereClause("\"", "\"", 2, signerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.DeveloperLicenseID, o.Signer}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeveloperLicenseID = related.ID
	if o.R == nil {
		o.R = &signerR{
			DeveloperLicense: related,
		}
	} else {
		o.R.DeveloperLicense = related
	}

	if related.R == nil {
		related.R = &developerLicenseR{
			Signers: SignerSlice{o},
		}
	} else {
		related.R.Signers = append(related.R.Signers, o)
	}

	return nil
}

// Signers retrieves all the records using an executor.
func Signers(mods ...qm.QueryMod) signerQuery {
	mods = append(mods, qm.From("\"identity_api\".\"signers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"identity_api\".\"signers\".*"})
	}

	return signerQuery{q}
}

// FindSigner retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSigner(ctx context.Context, exec boil.ContextExecutor, developerLicenseID int, signer []byte, selectCols ...string) (*Signer, error) {
	signerObj := &Signer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"identity_api\".\"signers\" where \"developer_license_id\"=$1 AND \"signer\"=$2", sel,
	)

	q := queries.Raw(query, developerLicenseID, signer)

	err := q.Bind(ctx, exec, signerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from signers")
	}

	if err = signerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return signerObj, err
	}

	return signerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Signer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no signers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(signerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	signerInsertCacheMut.RLock()
	cache, cached := signerInsertCache[key]
	signerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			signerAllColumns,
			signerColumnsWithDefault,
			signerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(signerType, signerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(signerType, signerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"identity_api\".\"signers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"identity_api\".\"signers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into signers")
	}

	if !cached {
		signerInsertCacheMut.Lock()
		signerInsertCache[key] = cache
		signerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Signer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Signer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	signerUpdateCacheMut.RLock()
	cache, cached := signerUpdateCache[key]
	signerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			signerAllColumns,
			signerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update signers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"identity_api\".\"signers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, signerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(signerType, signerMapping, append(wl, signerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update signers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for signers")
	}

	if !cached {
		signerUpdateCacheMut.Lock()
		signerUpdateCache[key] = cache
		signerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q signerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for signers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for signers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SignerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), signerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"identity_api\".\"signers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, signerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in signer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all signer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Signer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no signers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(signerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	signerUpsertCacheMut.RLock()
	cache, cached := signerUpsertCache[key]
	signerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			signerAllColumns,
			signerColumnsWithDefault,
			signerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			signerAllColumns,
			signerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert signers, could not build update column list")
		}

		ret := strmangle.SetComplement(signerAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(signerPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert signers, could not build conflict column list")
			}

			conflict = make([]string, len(signerPrimaryKeyColumns))
			copy(conflict, signerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"identity_api\".\"signers\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(signerType, signerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(signerType, signerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert signers")
	}

	if !cached {
		signerUpsertCacheMut.Lock()
		signerUpsertCache[key] = cache
		signerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Signer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Signer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Signer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), signerPrimaryKeyMapping)
	sql := "DELETE FROM \"identity_api\".\"signers\" WHERE \"developer_license_id\"=$1 AND \"signer\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from signers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for signers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q signerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no signerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from signers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for signers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SignerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(signerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), signerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"identity_api\".\"signers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, signerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from signer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for signers")
	}

	if len(signerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Signer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSigner(ctx, exec, o.DeveloperLicenseID, o.Signer)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SignerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SignerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), signerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"identity_api\".\"signers\".* FROM \"identity_api\".\"signers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, signerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SignerSlice")
	}

	*o = slice

	return nil
}

// SignerExists checks if the Signer row exists.
func SignerExists(ctx context.Context, exec boil.ContextExecutor, developerLicenseID int, signer []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"identity_api\".\"signers\" where \"developer_license_id\"=$1 AND \"signer\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, developerLicenseID, signer)
	}
	row := exec.QueryRowContext(ctx, sql, developerLicenseID, signer)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if signers exists")
	}

	return exists, nil
}

// Exists checks if the Signer row exists.
func (o *Signer) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SignerExists(ctx, exec, o.DeveloperLicenseID, o.Signer)
}
