// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Connection is an object representing the database table.
type Connection struct {
	Address         []byte    `boil:"address" json:"address" toml:"address" yaml:"address"`
	Owner           []byte    `boil:"owner" json:"owner" toml:"owner" yaml:"owner"`
	MintedAt        time.Time `boil:"minted_at" json:"minted_at" toml:"minted_at" yaml:"minted_at"`
	ID              []byte    `boil:"id" json:"id" toml:"id" yaml:"id"`
	IntegrationNode null.Int  `boil:"integration_node" json:"integration_node,omitempty" toml:"integration_node" yaml:"integration_node,omitempty"`

	R *connectionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L connectionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ConnectionColumns = struct {
	Address         string
	Owner           string
	MintedAt        string
	ID              string
	IntegrationNode string
}{
	Address:         "address",
	Owner:           "owner",
	MintedAt:        "minted_at",
	ID:              "id",
	IntegrationNode: "integration_node",
}

var ConnectionTableColumns = struct {
	Address         string
	Owner           string
	MintedAt        string
	ID              string
	IntegrationNode string
}{
	Address:         "connections.address",
	Owner:           "connections.owner",
	MintedAt:        "connections.minted_at",
	ID:              "connections.id",
	IntegrationNode: "connections.integration_node",
}

// Generated where

var ConnectionWhere = struct {
	Address         whereHelper__byte
	Owner           whereHelper__byte
	MintedAt        whereHelpertime_Time
	ID              whereHelper__byte
	IntegrationNode whereHelpernull_Int
}{
	Address:         whereHelper__byte{field: "\"identity_api\".\"connections\".\"address\""},
	Owner:           whereHelper__byte{field: "\"identity_api\".\"connections\".\"owner\""},
	MintedAt:        whereHelpertime_Time{field: "\"identity_api\".\"connections\".\"minted_at\""},
	ID:              whereHelper__byte{field: "\"identity_api\".\"connections\".\"id\""},
	IntegrationNode: whereHelpernull_Int{field: "\"identity_api\".\"connections\".\"integration_node\""},
}

// ConnectionRels is where relationship names are stored.
var ConnectionRels = struct {
	SyntheticDevices string
}{
	SyntheticDevices: "SyntheticDevices",
}

// connectionR is where relationships are stored.
type connectionR struct {
	SyntheticDevices SyntheticDeviceSlice `boil:"SyntheticDevices" json:"SyntheticDevices" toml:"SyntheticDevices" yaml:"SyntheticDevices"`
}

// NewStruct creates a new relationship struct
func (*connectionR) NewStruct() *connectionR {
	return &connectionR{}
}

func (o *Connection) GetSyntheticDevices() SyntheticDeviceSlice {
	if o == nil {
		return nil
	}

	return o.R.GetSyntheticDevices()
}

func (r *connectionR) GetSyntheticDevices() SyntheticDeviceSlice {
	if r == nil {
		return nil
	}

	return r.SyntheticDevices
}

// connectionL is where Load methods for each relationship are stored.
type connectionL struct{}

var (
	connectionAllColumns            = []string{"address", "owner", "minted_at", "id", "integration_node"}
	connectionColumnsWithoutDefault = []string{"address", "owner", "minted_at", "id"}
	connectionColumnsWithDefault    = []string{"integration_node"}
	connectionPrimaryKeyColumns     = []string{"id"}
	connectionGeneratedColumns      = []string{}
)

type (
	// ConnectionSlice is an alias for a slice of pointers to Connection.
	// This should almost always be used instead of []Connection.
	ConnectionSlice []*Connection
	// ConnectionHook is the signature for custom Connection hook methods
	ConnectionHook func(context.Context, boil.ContextExecutor, *Connection) error

	connectionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	connectionType                 = reflect.TypeOf(&Connection{})
	connectionMapping              = queries.MakeStructMapping(connectionType)
	connectionPrimaryKeyMapping, _ = queries.BindMapping(connectionType, connectionMapping, connectionPrimaryKeyColumns)
	connectionInsertCacheMut       sync.RWMutex
	connectionInsertCache          = make(map[string]insertCache)
	connectionUpdateCacheMut       sync.RWMutex
	connectionUpdateCache          = make(map[string]updateCache)
	connectionUpsertCacheMut       sync.RWMutex
	connectionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var connectionAfterSelectMu sync.Mutex
var connectionAfterSelectHooks []ConnectionHook

var connectionBeforeInsertMu sync.Mutex
var connectionBeforeInsertHooks []ConnectionHook
var connectionAfterInsertMu sync.Mutex
var connectionAfterInsertHooks []ConnectionHook

var connectionBeforeUpdateMu sync.Mutex
var connectionBeforeUpdateHooks []ConnectionHook
var connectionAfterUpdateMu sync.Mutex
var connectionAfterUpdateHooks []ConnectionHook

var connectionBeforeDeleteMu sync.Mutex
var connectionBeforeDeleteHooks []ConnectionHook
var connectionAfterDeleteMu sync.Mutex
var connectionAfterDeleteHooks []ConnectionHook

var connectionBeforeUpsertMu sync.Mutex
var connectionBeforeUpsertHooks []ConnectionHook
var connectionAfterUpsertMu sync.Mutex
var connectionAfterUpsertHooks []ConnectionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Connection) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range connectionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Connection) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range connectionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Connection) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range connectionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Connection) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range connectionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Connection) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range connectionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Connection) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range connectionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Connection) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range connectionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Connection) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range connectionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Connection) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range connectionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddConnectionHook registers your hook function for all future operations.
func AddConnectionHook(hookPoint boil.HookPoint, connectionHook ConnectionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		connectionAfterSelectMu.Lock()
		connectionAfterSelectHooks = append(connectionAfterSelectHooks, connectionHook)
		connectionAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		connectionBeforeInsertMu.Lock()
		connectionBeforeInsertHooks = append(connectionBeforeInsertHooks, connectionHook)
		connectionBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		connectionAfterInsertMu.Lock()
		connectionAfterInsertHooks = append(connectionAfterInsertHooks, connectionHook)
		connectionAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		connectionBeforeUpdateMu.Lock()
		connectionBeforeUpdateHooks = append(connectionBeforeUpdateHooks, connectionHook)
		connectionBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		connectionAfterUpdateMu.Lock()
		connectionAfterUpdateHooks = append(connectionAfterUpdateHooks, connectionHook)
		connectionAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		connectionBeforeDeleteMu.Lock()
		connectionBeforeDeleteHooks = append(connectionBeforeDeleteHooks, connectionHook)
		connectionBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		connectionAfterDeleteMu.Lock()
		connectionAfterDeleteHooks = append(connectionAfterDeleteHooks, connectionHook)
		connectionAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		connectionBeforeUpsertMu.Lock()
		connectionBeforeUpsertHooks = append(connectionBeforeUpsertHooks, connectionHook)
		connectionBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		connectionAfterUpsertMu.Lock()
		connectionAfterUpsertHooks = append(connectionAfterUpsertHooks, connectionHook)
		connectionAfterUpsertMu.Unlock()
	}
}

// One returns a single connection record from the query.
func (q connectionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Connection, error) {
	o := &Connection{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for connections")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Connection records from the query.
func (q connectionQuery) All(ctx context.Context, exec boil.ContextExecutor) (ConnectionSlice, error) {
	var o []*Connection

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Connection slice")
	}

	if len(connectionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Connection records in the query.
func (q connectionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count connections rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q connectionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if connections exists")
	}

	return count > 0, nil
}

// SyntheticDevices retrieves all the synthetic_device's SyntheticDevices with an executor.
func (o *Connection) SyntheticDevices(mods ...qm.QueryMod) syntheticDeviceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"identity_api\".\"synthetic_devices\".\"connection_id\"=?", o.ID),
	)

	return SyntheticDevices(queryMods...)
}

// LoadSyntheticDevices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (connectionL) LoadSyntheticDevices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeConnection interface{}, mods queries.Applicator) error {
	var slice []*Connection
	var object *Connection

	if singular {
		var ok bool
		object, ok = maybeConnection.(*Connection)
		if !ok {
			object = new(Connection)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeConnection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeConnection))
			}
		}
	} else {
		s, ok := maybeConnection.(*[]*Connection)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeConnection)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeConnection))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &connectionR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &connectionR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`identity_api.synthetic_devices`),
		qm.WhereIn(`identity_api.synthetic_devices.connection_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load synthetic_devices")
	}

	var resultSlice []*SyntheticDevice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice synthetic_devices")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on synthetic_devices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for synthetic_devices")
	}

	if len(syntheticDeviceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SyntheticDevices = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &syntheticDeviceR{}
			}
			foreign.R.Connection = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ConnectionID) {
				local.R.SyntheticDevices = append(local.R.SyntheticDevices, foreign)
				if foreign.R == nil {
					foreign.R = &syntheticDeviceR{}
				}
				foreign.R.Connection = local
				break
			}
		}
	}

	return nil
}

// AddSyntheticDevices adds the given related objects to the existing relationships
// of the connection, optionally inserting them as new records.
// Appends related to o.R.SyntheticDevices.
// Sets related.R.Connection appropriately.
func (o *Connection) AddSyntheticDevices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SyntheticDevice) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ConnectionID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"identity_api\".\"synthetic_devices\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"connection_id"}),
				strmangle.WhereClause("\"", "\"", 2, syntheticDevicePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ConnectionID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &connectionR{
			SyntheticDevices: related,
		}
	} else {
		o.R.SyntheticDevices = append(o.R.SyntheticDevices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &syntheticDeviceR{
				Connection: o,
			}
		} else {
			rel.R.Connection = o
		}
	}
	return nil
}

// SetSyntheticDevices removes all previously related items of the
// connection replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Connection's SyntheticDevices accordingly.
// Replaces o.R.SyntheticDevices with related.
// Sets related.R.Connection's SyntheticDevices accordingly.
func (o *Connection) SetSyntheticDevices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SyntheticDevice) error {
	query := "update \"identity_api\".\"synthetic_devices\" set \"connection_id\" = null where \"connection_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SyntheticDevices {
			queries.SetScanner(&rel.ConnectionID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Connection = nil
		}
		o.R.SyntheticDevices = nil
	}

	return o.AddSyntheticDevices(ctx, exec, insert, related...)
}

// RemoveSyntheticDevices relationships from objects passed in.
// Removes related items from R.SyntheticDevices (uses pointer comparison, removal does not keep order)
// Sets related.R.Connection.
func (o *Connection) RemoveSyntheticDevices(ctx context.Context, exec boil.ContextExecutor, related ...*SyntheticDevice) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ConnectionID, nil)
		if rel.R != nil {
			rel.R.Connection = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("connection_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SyntheticDevices {
			if rel != ri {
				continue
			}

			ln := len(o.R.SyntheticDevices)
			if ln > 1 && i < ln-1 {
				o.R.SyntheticDevices[i] = o.R.SyntheticDevices[ln-1]
			}
			o.R.SyntheticDevices = o.R.SyntheticDevices[:ln-1]
			break
		}
	}

	return nil
}

// Connections retrieves all the records using an executor.
func Connections(mods ...qm.QueryMod) connectionQuery {
	mods = append(mods, qm.From("\"identity_api\".\"connections\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"identity_api\".\"connections\".*"})
	}

	return connectionQuery{q}
}

// FindConnection retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindConnection(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*Connection, error) {
	connectionObj := &Connection{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"identity_api\".\"connections\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, connectionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from connections")
	}

	if err = connectionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return connectionObj, err
	}

	return connectionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Connection) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no connections provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(connectionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	connectionInsertCacheMut.RLock()
	cache, cached := connectionInsertCache[key]
	connectionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			connectionAllColumns,
			connectionColumnsWithDefault,
			connectionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(connectionType, connectionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(connectionType, connectionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"identity_api\".\"connections\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"identity_api\".\"connections\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into connections")
	}

	if !cached {
		connectionInsertCacheMut.Lock()
		connectionInsertCache[key] = cache
		connectionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Connection.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Connection) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	connectionUpdateCacheMut.RLock()
	cache, cached := connectionUpdateCache[key]
	connectionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			connectionAllColumns,
			connectionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update connections, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"identity_api\".\"connections\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, connectionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(connectionType, connectionMapping, append(wl, connectionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update connections row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for connections")
	}

	if !cached {
		connectionUpdateCacheMut.Lock()
		connectionUpdateCache[key] = cache
		connectionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q connectionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for connections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for connections")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ConnectionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), connectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"identity_api\".\"connections\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, connectionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in connection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all connection")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Connection) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no connections provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(connectionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	connectionUpsertCacheMut.RLock()
	cache, cached := connectionUpsertCache[key]
	connectionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			connectionAllColumns,
			connectionColumnsWithDefault,
			connectionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			connectionAllColumns,
			connectionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert connections, could not build update column list")
		}

		ret := strmangle.SetComplement(connectionAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(connectionPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert connections, could not build conflict column list")
			}

			conflict = make([]string, len(connectionPrimaryKeyColumns))
			copy(conflict, connectionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"identity_api\".\"connections\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(connectionType, connectionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(connectionType, connectionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert connections")
	}

	if !cached {
		connectionUpsertCacheMut.Lock()
		connectionUpsertCache[key] = cache
		connectionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Connection record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Connection) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Connection provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), connectionPrimaryKeyMapping)
	sql := "DELETE FROM \"identity_api\".\"connections\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from connections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for connections")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q connectionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no connectionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from connections")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for connections")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ConnectionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(connectionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), connectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"identity_api\".\"connections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, connectionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from connection slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for connections")
	}

	if len(connectionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Connection) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindConnection(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ConnectionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ConnectionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), connectionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"identity_api\".\"connections\".* FROM \"identity_api\".\"connections\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, connectionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ConnectionSlice")
	}

	*o = slice

	return nil
}

// ConnectionExists checks if the Connection row exists.
func ConnectionExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"identity_api\".\"connections\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if connections exists")
	}

	return exists, nil
}

// Exists checks if the Connection row exists.
func (o *Connection) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ConnectionExists(ctx, exec, o.ID)
}
