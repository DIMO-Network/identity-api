// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// KernalAccount is an object representing the database table.
type KernalAccount struct {
	Kernal       []byte `boil:"kernal" json:"kernal" toml:"kernal" yaml:"kernal"`
	OwnerAddress []byte `boil:"owner_address" json:"owner_address" toml:"owner_address" yaml:"owner_address"`

	R *kernalAccountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L kernalAccountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var KernalAccountColumns = struct {
	Kernal       string
	OwnerAddress string
}{
	Kernal:       "kernal",
	OwnerAddress: "owner_address",
}

var KernalAccountTableColumns = struct {
	Kernal       string
	OwnerAddress string
}{
	Kernal:       "kernal_accounts.kernal",
	OwnerAddress: "kernal_accounts.owner_address",
}

// Generated where

var KernalAccountWhere = struct {
	Kernal       whereHelper__byte
	OwnerAddress whereHelper__byte
}{
	Kernal:       whereHelper__byte{field: "\"identity_api\".\"kernal_accounts\".\"kernal\""},
	OwnerAddress: whereHelper__byte{field: "\"identity_api\".\"kernal_accounts\".\"owner_address\""},
}

// KernalAccountRels is where relationship names are stored.
var KernalAccountRels = struct {
}{}

// kernalAccountR is where relationships are stored.
type kernalAccountR struct {
}

// NewStruct creates a new relationship struct
func (*kernalAccountR) NewStruct() *kernalAccountR {
	return &kernalAccountR{}
}

// kernalAccountL is where Load methods for each relationship are stored.
type kernalAccountL struct{}

var (
	kernalAccountAllColumns            = []string{"kernal", "owner_address"}
	kernalAccountColumnsWithoutDefault = []string{"kernal", "owner_address"}
	kernalAccountColumnsWithDefault    = []string{}
	kernalAccountPrimaryKeyColumns     = []string{"kernal"}
	kernalAccountGeneratedColumns      = []string{}
)

type (
	// KernalAccountSlice is an alias for a slice of pointers to KernalAccount.
	// This should almost always be used instead of []KernalAccount.
	KernalAccountSlice []*KernalAccount
	// KernalAccountHook is the signature for custom KernalAccount hook methods
	KernalAccountHook func(context.Context, boil.ContextExecutor, *KernalAccount) error

	kernalAccountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	kernalAccountType                 = reflect.TypeOf(&KernalAccount{})
	kernalAccountMapping              = queries.MakeStructMapping(kernalAccountType)
	kernalAccountPrimaryKeyMapping, _ = queries.BindMapping(kernalAccountType, kernalAccountMapping, kernalAccountPrimaryKeyColumns)
	kernalAccountInsertCacheMut       sync.RWMutex
	kernalAccountInsertCache          = make(map[string]insertCache)
	kernalAccountUpdateCacheMut       sync.RWMutex
	kernalAccountUpdateCache          = make(map[string]updateCache)
	kernalAccountUpsertCacheMut       sync.RWMutex
	kernalAccountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var kernalAccountAfterSelectMu sync.Mutex
var kernalAccountAfterSelectHooks []KernalAccountHook

var kernalAccountBeforeInsertMu sync.Mutex
var kernalAccountBeforeInsertHooks []KernalAccountHook
var kernalAccountAfterInsertMu sync.Mutex
var kernalAccountAfterInsertHooks []KernalAccountHook

var kernalAccountBeforeUpdateMu sync.Mutex
var kernalAccountBeforeUpdateHooks []KernalAccountHook
var kernalAccountAfterUpdateMu sync.Mutex
var kernalAccountAfterUpdateHooks []KernalAccountHook

var kernalAccountBeforeDeleteMu sync.Mutex
var kernalAccountBeforeDeleteHooks []KernalAccountHook
var kernalAccountAfterDeleteMu sync.Mutex
var kernalAccountAfterDeleteHooks []KernalAccountHook

var kernalAccountBeforeUpsertMu sync.Mutex
var kernalAccountBeforeUpsertHooks []KernalAccountHook
var kernalAccountAfterUpsertMu sync.Mutex
var kernalAccountAfterUpsertHooks []KernalAccountHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *KernalAccount) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kernalAccountAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *KernalAccount) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kernalAccountBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *KernalAccount) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kernalAccountAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *KernalAccount) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kernalAccountBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *KernalAccount) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kernalAccountAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *KernalAccount) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kernalAccountBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *KernalAccount) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kernalAccountAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *KernalAccount) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kernalAccountBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *KernalAccount) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kernalAccountAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddKernalAccountHook registers your hook function for all future operations.
func AddKernalAccountHook(hookPoint boil.HookPoint, kernalAccountHook KernalAccountHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		kernalAccountAfterSelectMu.Lock()
		kernalAccountAfterSelectHooks = append(kernalAccountAfterSelectHooks, kernalAccountHook)
		kernalAccountAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		kernalAccountBeforeInsertMu.Lock()
		kernalAccountBeforeInsertHooks = append(kernalAccountBeforeInsertHooks, kernalAccountHook)
		kernalAccountBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		kernalAccountAfterInsertMu.Lock()
		kernalAccountAfterInsertHooks = append(kernalAccountAfterInsertHooks, kernalAccountHook)
		kernalAccountAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		kernalAccountBeforeUpdateMu.Lock()
		kernalAccountBeforeUpdateHooks = append(kernalAccountBeforeUpdateHooks, kernalAccountHook)
		kernalAccountBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		kernalAccountAfterUpdateMu.Lock()
		kernalAccountAfterUpdateHooks = append(kernalAccountAfterUpdateHooks, kernalAccountHook)
		kernalAccountAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		kernalAccountBeforeDeleteMu.Lock()
		kernalAccountBeforeDeleteHooks = append(kernalAccountBeforeDeleteHooks, kernalAccountHook)
		kernalAccountBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		kernalAccountAfterDeleteMu.Lock()
		kernalAccountAfterDeleteHooks = append(kernalAccountAfterDeleteHooks, kernalAccountHook)
		kernalAccountAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		kernalAccountBeforeUpsertMu.Lock()
		kernalAccountBeforeUpsertHooks = append(kernalAccountBeforeUpsertHooks, kernalAccountHook)
		kernalAccountBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		kernalAccountAfterUpsertMu.Lock()
		kernalAccountAfterUpsertHooks = append(kernalAccountAfterUpsertHooks, kernalAccountHook)
		kernalAccountAfterUpsertMu.Unlock()
	}
}

// One returns a single kernalAccount record from the query.
func (q kernalAccountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*KernalAccount, error) {
	o := &KernalAccount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for kernal_accounts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all KernalAccount records from the query.
func (q kernalAccountQuery) All(ctx context.Context, exec boil.ContextExecutor) (KernalAccountSlice, error) {
	var o []*KernalAccount

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to KernalAccount slice")
	}

	if len(kernalAccountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all KernalAccount records in the query.
func (q kernalAccountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count kernal_accounts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q kernalAccountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if kernal_accounts exists")
	}

	return count > 0, nil
}

// KernalAccounts retrieves all the records using an executor.
func KernalAccounts(mods ...qm.QueryMod) kernalAccountQuery {
	mods = append(mods, qm.From("\"identity_api\".\"kernal_accounts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"identity_api\".\"kernal_accounts\".*"})
	}

	return kernalAccountQuery{q}
}

// FindKernalAccount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindKernalAccount(ctx context.Context, exec boil.ContextExecutor, kernal []byte, selectCols ...string) (*KernalAccount, error) {
	kernalAccountObj := &KernalAccount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"identity_api\".\"kernal_accounts\" where \"kernal\"=$1", sel,
	)

	q := queries.Raw(query, kernal)

	err := q.Bind(ctx, exec, kernalAccountObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from kernal_accounts")
	}

	if err = kernalAccountObj.doAfterSelectHooks(ctx, exec); err != nil {
		return kernalAccountObj, err
	}

	return kernalAccountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *KernalAccount) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no kernal_accounts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(kernalAccountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	kernalAccountInsertCacheMut.RLock()
	cache, cached := kernalAccountInsertCache[key]
	kernalAccountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			kernalAccountAllColumns,
			kernalAccountColumnsWithDefault,
			kernalAccountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(kernalAccountType, kernalAccountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(kernalAccountType, kernalAccountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"identity_api\".\"kernal_accounts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"identity_api\".\"kernal_accounts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into kernal_accounts")
	}

	if !cached {
		kernalAccountInsertCacheMut.Lock()
		kernalAccountInsertCache[key] = cache
		kernalAccountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the KernalAccount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *KernalAccount) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	kernalAccountUpdateCacheMut.RLock()
	cache, cached := kernalAccountUpdateCache[key]
	kernalAccountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			kernalAccountAllColumns,
			kernalAccountPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update kernal_accounts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"identity_api\".\"kernal_accounts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, kernalAccountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(kernalAccountType, kernalAccountMapping, append(wl, kernalAccountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update kernal_accounts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for kernal_accounts")
	}

	if !cached {
		kernalAccountUpdateCacheMut.Lock()
		kernalAccountUpdateCache[key] = cache
		kernalAccountUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q kernalAccountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for kernal_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for kernal_accounts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o KernalAccountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), kernalAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"identity_api\".\"kernal_accounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, kernalAccountPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in kernalAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all kernalAccount")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *KernalAccount) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no kernal_accounts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(kernalAccountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	kernalAccountUpsertCacheMut.RLock()
	cache, cached := kernalAccountUpsertCache[key]
	kernalAccountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			kernalAccountAllColumns,
			kernalAccountColumnsWithDefault,
			kernalAccountColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			kernalAccountAllColumns,
			kernalAccountPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert kernal_accounts, could not build update column list")
		}

		ret := strmangle.SetComplement(kernalAccountAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(kernalAccountPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert kernal_accounts, could not build conflict column list")
			}

			conflict = make([]string, len(kernalAccountPrimaryKeyColumns))
			copy(conflict, kernalAccountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"identity_api\".\"kernal_accounts\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(kernalAccountType, kernalAccountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(kernalAccountType, kernalAccountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert kernal_accounts")
	}

	if !cached {
		kernalAccountUpsertCacheMut.Lock()
		kernalAccountUpsertCache[key] = cache
		kernalAccountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single KernalAccount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *KernalAccount) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no KernalAccount provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), kernalAccountPrimaryKeyMapping)
	sql := "DELETE FROM \"identity_api\".\"kernal_accounts\" WHERE \"kernal\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from kernal_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for kernal_accounts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q kernalAccountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no kernalAccountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from kernal_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for kernal_accounts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o KernalAccountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(kernalAccountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), kernalAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"identity_api\".\"kernal_accounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, kernalAccountPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from kernalAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for kernal_accounts")
	}

	if len(kernalAccountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *KernalAccount) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindKernalAccount(ctx, exec, o.Kernal)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *KernalAccountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := KernalAccountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), kernalAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"identity_api\".\"kernal_accounts\".* FROM \"identity_api\".\"kernal_accounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, kernalAccountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in KernalAccountSlice")
	}

	*o = slice

	return nil
}

// KernalAccountExists checks if the KernalAccount row exists.
func KernalAccountExists(ctx context.Context, exec boil.ContextExecutor, kernal []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"identity_api\".\"kernal_accounts\" where \"kernal\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, kernal)
	}
	row := exec.QueryRowContext(ctx, sql, kernal)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if kernal_accounts exists")
	}

	return exists, nil
}

// Exists checks if the KernalAccount row exists.
func (o *KernalAccount) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return KernalAccountExists(ctx, exec, o.Kernal)
}
