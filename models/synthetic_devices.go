// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// SyntheticDevice is an object representing the database table.
type SyntheticDevice struct {
	ID            int        `boil:"id" json:"id" toml:"id" yaml:"id"`
	IntegrationID int        `boil:"integration_id" json:"integration_id" toml:"integration_id" yaml:"integration_id"`
	VehicleID     int        `boil:"vehicle_id" json:"vehicle_id" toml:"vehicle_id" yaml:"vehicle_id"`
	DeviceAddress []byte     `boil:"device_address" json:"device_address" toml:"device_address" yaml:"device_address"`
	MintedAt      time.Time  `boil:"minted_at" json:"minted_at" toml:"minted_at" yaml:"minted_at"`
	ConnectionID  null.Bytes `boil:"connection_id" json:"connection_id,omitempty" toml:"connection_id" yaml:"connection_id,omitempty"`

	R *syntheticDeviceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L syntheticDeviceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SyntheticDeviceColumns = struct {
	ID            string
	IntegrationID string
	VehicleID     string
	DeviceAddress string
	MintedAt      string
	ConnectionID  string
}{
	ID:            "id",
	IntegrationID: "integration_id",
	VehicleID:     "vehicle_id",
	DeviceAddress: "device_address",
	MintedAt:      "minted_at",
	ConnectionID:  "connection_id",
}

var SyntheticDeviceTableColumns = struct {
	ID            string
	IntegrationID string
	VehicleID     string
	DeviceAddress string
	MintedAt      string
	ConnectionID  string
}{
	ID:            "synthetic_devices.id",
	IntegrationID: "synthetic_devices.integration_id",
	VehicleID:     "synthetic_devices.vehicle_id",
	DeviceAddress: "synthetic_devices.device_address",
	MintedAt:      "synthetic_devices.minted_at",
	ConnectionID:  "synthetic_devices.connection_id",
}

// Generated where

var SyntheticDeviceWhere = struct {
	ID            whereHelperint
	IntegrationID whereHelperint
	VehicleID     whereHelperint
	DeviceAddress whereHelper__byte
	MintedAt      whereHelpertime_Time
	ConnectionID  whereHelpernull_Bytes
}{
	ID:            whereHelperint{field: "\"identity_api\".\"synthetic_devices\".\"id\""},
	IntegrationID: whereHelperint{field: "\"identity_api\".\"synthetic_devices\".\"integration_id\""},
	VehicleID:     whereHelperint{field: "\"identity_api\".\"synthetic_devices\".\"vehicle_id\""},
	DeviceAddress: whereHelper__byte{field: "\"identity_api\".\"synthetic_devices\".\"device_address\""},
	MintedAt:      whereHelpertime_Time{field: "\"identity_api\".\"synthetic_devices\".\"minted_at\""},
	ConnectionID:  whereHelpernull_Bytes{field: "\"identity_api\".\"synthetic_devices\".\"connection_id\""},
}

// SyntheticDeviceRels is where relationship names are stored.
var SyntheticDeviceRels = struct {
	Connection            string
	Vehicle               string
	SyntheticTokenRewards string
}{
	Connection:            "Connection",
	Vehicle:               "Vehicle",
	SyntheticTokenRewards: "SyntheticTokenRewards",
}

// syntheticDeviceR is where relationships are stored.
type syntheticDeviceR struct {
	Connection            *Connection `boil:"Connection" json:"Connection" toml:"Connection" yaml:"Connection"`
	Vehicle               *Vehicle    `boil:"Vehicle" json:"Vehicle" toml:"Vehicle" yaml:"Vehicle"`
	SyntheticTokenRewards RewardSlice `boil:"SyntheticTokenRewards" json:"SyntheticTokenRewards" toml:"SyntheticTokenRewards" yaml:"SyntheticTokenRewards"`
}

// NewStruct creates a new relationship struct
func (*syntheticDeviceR) NewStruct() *syntheticDeviceR {
	return &syntheticDeviceR{}
}

func (o *SyntheticDevice) GetConnection() *Connection {
	if o == nil {
		return nil
	}

	return o.R.GetConnection()
}

func (r *syntheticDeviceR) GetConnection() *Connection {
	if r == nil {
		return nil
	}

	return r.Connection
}

func (o *SyntheticDevice) GetVehicle() *Vehicle {
	if o == nil {
		return nil
	}

	return o.R.GetVehicle()
}

func (r *syntheticDeviceR) GetVehicle() *Vehicle {
	if r == nil {
		return nil
	}

	return r.Vehicle
}

func (o *SyntheticDevice) GetSyntheticTokenRewards() RewardSlice {
	if o == nil {
		return nil
	}

	return o.R.GetSyntheticTokenRewards()
}

func (r *syntheticDeviceR) GetSyntheticTokenRewards() RewardSlice {
	if r == nil {
		return nil
	}

	return r.SyntheticTokenRewards
}

// syntheticDeviceL is where Load methods for each relationship are stored.
type syntheticDeviceL struct{}

var (
	syntheticDeviceAllColumns            = []string{"id", "integration_id", "vehicle_id", "device_address", "minted_at", "connection_id"}
	syntheticDeviceColumnsWithoutDefault = []string{"id", "integration_id", "vehicle_id", "device_address", "minted_at"}
	syntheticDeviceColumnsWithDefault    = []string{"connection_id"}
	syntheticDevicePrimaryKeyColumns     = []string{"id"}
	syntheticDeviceGeneratedColumns      = []string{}
)

type (
	// SyntheticDeviceSlice is an alias for a slice of pointers to SyntheticDevice.
	// This should almost always be used instead of []SyntheticDevice.
	SyntheticDeviceSlice []*SyntheticDevice
	// SyntheticDeviceHook is the signature for custom SyntheticDevice hook methods
	SyntheticDeviceHook func(context.Context, boil.ContextExecutor, *SyntheticDevice) error

	syntheticDeviceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	syntheticDeviceType                 = reflect.TypeOf(&SyntheticDevice{})
	syntheticDeviceMapping              = queries.MakeStructMapping(syntheticDeviceType)
	syntheticDevicePrimaryKeyMapping, _ = queries.BindMapping(syntheticDeviceType, syntheticDeviceMapping, syntheticDevicePrimaryKeyColumns)
	syntheticDeviceInsertCacheMut       sync.RWMutex
	syntheticDeviceInsertCache          = make(map[string]insertCache)
	syntheticDeviceUpdateCacheMut       sync.RWMutex
	syntheticDeviceUpdateCache          = make(map[string]updateCache)
	syntheticDeviceUpsertCacheMut       sync.RWMutex
	syntheticDeviceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var syntheticDeviceAfterSelectMu sync.Mutex
var syntheticDeviceAfterSelectHooks []SyntheticDeviceHook

var syntheticDeviceBeforeInsertMu sync.Mutex
var syntheticDeviceBeforeInsertHooks []SyntheticDeviceHook
var syntheticDeviceAfterInsertMu sync.Mutex
var syntheticDeviceAfterInsertHooks []SyntheticDeviceHook

var syntheticDeviceBeforeUpdateMu sync.Mutex
var syntheticDeviceBeforeUpdateHooks []SyntheticDeviceHook
var syntheticDeviceAfterUpdateMu sync.Mutex
var syntheticDeviceAfterUpdateHooks []SyntheticDeviceHook

var syntheticDeviceBeforeDeleteMu sync.Mutex
var syntheticDeviceBeforeDeleteHooks []SyntheticDeviceHook
var syntheticDeviceAfterDeleteMu sync.Mutex
var syntheticDeviceAfterDeleteHooks []SyntheticDeviceHook

var syntheticDeviceBeforeUpsertMu sync.Mutex
var syntheticDeviceBeforeUpsertHooks []SyntheticDeviceHook
var syntheticDeviceAfterUpsertMu sync.Mutex
var syntheticDeviceAfterUpsertHooks []SyntheticDeviceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SyntheticDevice) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SyntheticDevice) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SyntheticDevice) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SyntheticDevice) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SyntheticDevice) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SyntheticDevice) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SyntheticDevice) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SyntheticDevice) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SyntheticDevice) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range syntheticDeviceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSyntheticDeviceHook registers your hook function for all future operations.
func AddSyntheticDeviceHook(hookPoint boil.HookPoint, syntheticDeviceHook SyntheticDeviceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		syntheticDeviceAfterSelectMu.Lock()
		syntheticDeviceAfterSelectHooks = append(syntheticDeviceAfterSelectHooks, syntheticDeviceHook)
		syntheticDeviceAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		syntheticDeviceBeforeInsertMu.Lock()
		syntheticDeviceBeforeInsertHooks = append(syntheticDeviceBeforeInsertHooks, syntheticDeviceHook)
		syntheticDeviceBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		syntheticDeviceAfterInsertMu.Lock()
		syntheticDeviceAfterInsertHooks = append(syntheticDeviceAfterInsertHooks, syntheticDeviceHook)
		syntheticDeviceAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		syntheticDeviceBeforeUpdateMu.Lock()
		syntheticDeviceBeforeUpdateHooks = append(syntheticDeviceBeforeUpdateHooks, syntheticDeviceHook)
		syntheticDeviceBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		syntheticDeviceAfterUpdateMu.Lock()
		syntheticDeviceAfterUpdateHooks = append(syntheticDeviceAfterUpdateHooks, syntheticDeviceHook)
		syntheticDeviceAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		syntheticDeviceBeforeDeleteMu.Lock()
		syntheticDeviceBeforeDeleteHooks = append(syntheticDeviceBeforeDeleteHooks, syntheticDeviceHook)
		syntheticDeviceBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		syntheticDeviceAfterDeleteMu.Lock()
		syntheticDeviceAfterDeleteHooks = append(syntheticDeviceAfterDeleteHooks, syntheticDeviceHook)
		syntheticDeviceAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		syntheticDeviceBeforeUpsertMu.Lock()
		syntheticDeviceBeforeUpsertHooks = append(syntheticDeviceBeforeUpsertHooks, syntheticDeviceHook)
		syntheticDeviceBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		syntheticDeviceAfterUpsertMu.Lock()
		syntheticDeviceAfterUpsertHooks = append(syntheticDeviceAfterUpsertHooks, syntheticDeviceHook)
		syntheticDeviceAfterUpsertMu.Unlock()
	}
}

// One returns a single syntheticDevice record from the query.
func (q syntheticDeviceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SyntheticDevice, error) {
	o := &SyntheticDevice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for synthetic_devices")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SyntheticDevice records from the query.
func (q syntheticDeviceQuery) All(ctx context.Context, exec boil.ContextExecutor) (SyntheticDeviceSlice, error) {
	var o []*SyntheticDevice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SyntheticDevice slice")
	}

	if len(syntheticDeviceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SyntheticDevice records in the query.
func (q syntheticDeviceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count synthetic_devices rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q syntheticDeviceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if synthetic_devices exists")
	}

	return count > 0, nil
}

// Connection pointed to by the foreign key.
func (o *SyntheticDevice) Connection(mods ...qm.QueryMod) connectionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ConnectionID),
	}

	queryMods = append(queryMods, mods...)

	return Connections(queryMods...)
}

// Vehicle pointed to by the foreign key.
func (o *SyntheticDevice) Vehicle(mods ...qm.QueryMod) vehicleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.VehicleID),
	}

	queryMods = append(queryMods, mods...)

	return Vehicles(queryMods...)
}

// SyntheticTokenRewards retrieves all the reward's Rewards with an executor via synthetic_token_id column.
func (o *SyntheticDevice) SyntheticTokenRewards(mods ...qm.QueryMod) rewardQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"identity_api\".\"rewards\".\"synthetic_token_id\"=?", o.ID),
	)

	return Rewards(queryMods...)
}

// LoadConnection allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syntheticDeviceL) LoadConnection(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSyntheticDevice interface{}, mods queries.Applicator) error {
	var slice []*SyntheticDevice
	var object *SyntheticDevice

	if singular {
		var ok bool
		object, ok = maybeSyntheticDevice.(*SyntheticDevice)
		if !ok {
			object = new(SyntheticDevice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSyntheticDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSyntheticDevice))
			}
		}
	} else {
		s, ok := maybeSyntheticDevice.(*[]*SyntheticDevice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSyntheticDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSyntheticDevice))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &syntheticDeviceR{}
		}
		if !queries.IsNil(object.ConnectionID) {
			args[object.ConnectionID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syntheticDeviceR{}
			}

			if !queries.IsNil(obj.ConnectionID) {
				args[obj.ConnectionID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`identity_api.connections`),
		qm.WhereIn(`identity_api.connections.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Connection")
	}

	var resultSlice []*Connection
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Connection")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for connections")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for connections")
	}

	if len(connectionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Connection = foreign
		if foreign.R == nil {
			foreign.R = &connectionR{}
		}
		foreign.R.SyntheticDevices = append(foreign.R.SyntheticDevices, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ConnectionID, foreign.ID) {
				local.R.Connection = foreign
				if foreign.R == nil {
					foreign.R = &connectionR{}
				}
				foreign.R.SyntheticDevices = append(foreign.R.SyntheticDevices, local)
				break
			}
		}
	}

	return nil
}

// LoadVehicle allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (syntheticDeviceL) LoadVehicle(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSyntheticDevice interface{}, mods queries.Applicator) error {
	var slice []*SyntheticDevice
	var object *SyntheticDevice

	if singular {
		var ok bool
		object, ok = maybeSyntheticDevice.(*SyntheticDevice)
		if !ok {
			object = new(SyntheticDevice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSyntheticDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSyntheticDevice))
			}
		}
	} else {
		s, ok := maybeSyntheticDevice.(*[]*SyntheticDevice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSyntheticDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSyntheticDevice))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &syntheticDeviceR{}
		}
		args[object.VehicleID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syntheticDeviceR{}
			}

			args[obj.VehicleID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`identity_api.vehicles`),
		qm.WhereIn(`identity_api.vehicles.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Vehicle")
	}

	var resultSlice []*Vehicle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Vehicle")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for vehicles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vehicles")
	}

	if len(vehicleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Vehicle = foreign
		if foreign.R == nil {
			foreign.R = &vehicleR{}
		}
		foreign.R.SyntheticDevice = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.VehicleID == foreign.ID {
				local.R.Vehicle = foreign
				if foreign.R == nil {
					foreign.R = &vehicleR{}
				}
				foreign.R.SyntheticDevice = local
				break
			}
		}
	}

	return nil
}

// LoadSyntheticTokenRewards allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (syntheticDeviceL) LoadSyntheticTokenRewards(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSyntheticDevice interface{}, mods queries.Applicator) error {
	var slice []*SyntheticDevice
	var object *SyntheticDevice

	if singular {
		var ok bool
		object, ok = maybeSyntheticDevice.(*SyntheticDevice)
		if !ok {
			object = new(SyntheticDevice)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSyntheticDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSyntheticDevice))
			}
		}
	} else {
		s, ok := maybeSyntheticDevice.(*[]*SyntheticDevice)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSyntheticDevice)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSyntheticDevice))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &syntheticDeviceR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &syntheticDeviceR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`identity_api.rewards`),
		qm.WhereIn(`identity_api.rewards.synthetic_token_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load rewards")
	}

	var resultSlice []*Reward
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice rewards")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on rewards")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for rewards")
	}

	if len(rewardAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SyntheticTokenRewards = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &rewardR{}
			}
			foreign.R.SyntheticToken = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SyntheticTokenID) {
				local.R.SyntheticTokenRewards = append(local.R.SyntheticTokenRewards, foreign)
				if foreign.R == nil {
					foreign.R = &rewardR{}
				}
				foreign.R.SyntheticToken = local
				break
			}
		}
	}

	return nil
}

// SetConnection of the syntheticDevice to the related item.
// Sets o.R.Connection to related.
// Adds o to related.R.SyntheticDevices.
func (o *SyntheticDevice) SetConnection(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Connection) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"identity_api\".\"synthetic_devices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"connection_id"}),
		strmangle.WhereClause("\"", "\"", 2, syntheticDevicePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ConnectionID, related.ID)
	if o.R == nil {
		o.R = &syntheticDeviceR{
			Connection: related,
		}
	} else {
		o.R.Connection = related
	}

	if related.R == nil {
		related.R = &connectionR{
			SyntheticDevices: SyntheticDeviceSlice{o},
		}
	} else {
		related.R.SyntheticDevices = append(related.R.SyntheticDevices, o)
	}

	return nil
}

// RemoveConnection relationship.
// Sets o.R.Connection to nil.
// Removes o from all passed in related items' relationships struct.
func (o *SyntheticDevice) RemoveConnection(ctx context.Context, exec boil.ContextExecutor, related *Connection) error {
	var err error

	queries.SetScanner(&o.ConnectionID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("connection_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Connection = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SyntheticDevices {
		if queries.Equal(o.ConnectionID, ri.ConnectionID) {
			continue
		}

		ln := len(related.R.SyntheticDevices)
		if ln > 1 && i < ln-1 {
			related.R.SyntheticDevices[i] = related.R.SyntheticDevices[ln-1]
		}
		related.R.SyntheticDevices = related.R.SyntheticDevices[:ln-1]
		break
	}
	return nil
}

// SetVehicle of the syntheticDevice to the related item.
// Sets o.R.Vehicle to related.
// Adds o to related.R.SyntheticDevice.
func (o *SyntheticDevice) SetVehicle(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Vehicle) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"identity_api\".\"synthetic_devices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"vehicle_id"}),
		strmangle.WhereClause("\"", "\"", 2, syntheticDevicePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.VehicleID = related.ID
	if o.R == nil {
		o.R = &syntheticDeviceR{
			Vehicle: related,
		}
	} else {
		o.R.Vehicle = related
	}

	if related.R == nil {
		related.R = &vehicleR{
			SyntheticDevice: o,
		}
	} else {
		related.R.SyntheticDevice = o
	}

	return nil
}

// AddSyntheticTokenRewards adds the given related objects to the existing relationships
// of the synthetic_device, optionally inserting them as new records.
// Appends related to o.R.SyntheticTokenRewards.
// Sets related.R.SyntheticToken appropriately.
func (o *SyntheticDevice) AddSyntheticTokenRewards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Reward) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SyntheticTokenID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"identity_api\".\"rewards\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"synthetic_token_id"}),
				strmangle.WhereClause("\"", "\"", 2, rewardPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.IssuanceWeek, rel.VehicleID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SyntheticTokenID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &syntheticDeviceR{
			SyntheticTokenRewards: related,
		}
	} else {
		o.R.SyntheticTokenRewards = append(o.R.SyntheticTokenRewards, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &rewardR{
				SyntheticToken: o,
			}
		} else {
			rel.R.SyntheticToken = o
		}
	}
	return nil
}

// SetSyntheticTokenRewards removes all previously related items of the
// synthetic_device replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SyntheticToken's SyntheticTokenRewards accordingly.
// Replaces o.R.SyntheticTokenRewards with related.
// Sets related.R.SyntheticToken's SyntheticTokenRewards accordingly.
func (o *SyntheticDevice) SetSyntheticTokenRewards(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Reward) error {
	query := "update \"identity_api\".\"rewards\" set \"synthetic_token_id\" = null where \"synthetic_token_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SyntheticTokenRewards {
			queries.SetScanner(&rel.SyntheticTokenID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SyntheticToken = nil
		}
		o.R.SyntheticTokenRewards = nil
	}

	return o.AddSyntheticTokenRewards(ctx, exec, insert, related...)
}

// RemoveSyntheticTokenRewards relationships from objects passed in.
// Removes related items from R.SyntheticTokenRewards (uses pointer comparison, removal does not keep order)
// Sets related.R.SyntheticToken.
func (o *SyntheticDevice) RemoveSyntheticTokenRewards(ctx context.Context, exec boil.ContextExecutor, related ...*Reward) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SyntheticTokenID, nil)
		if rel.R != nil {
			rel.R.SyntheticToken = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("synthetic_token_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SyntheticTokenRewards {
			if rel != ri {
				continue
			}

			ln := len(o.R.SyntheticTokenRewards)
			if ln > 1 && i < ln-1 {
				o.R.SyntheticTokenRewards[i] = o.R.SyntheticTokenRewards[ln-1]
			}
			o.R.SyntheticTokenRewards = o.R.SyntheticTokenRewards[:ln-1]
			break
		}
	}

	return nil
}

// SyntheticDevices retrieves all the records using an executor.
func SyntheticDevices(mods ...qm.QueryMod) syntheticDeviceQuery {
	mods = append(mods, qm.From("\"identity_api\".\"synthetic_devices\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"identity_api\".\"synthetic_devices\".*"})
	}

	return syntheticDeviceQuery{q}
}

// FindSyntheticDevice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSyntheticDevice(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*SyntheticDevice, error) {
	syntheticDeviceObj := &SyntheticDevice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"identity_api\".\"synthetic_devices\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, syntheticDeviceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from synthetic_devices")
	}

	if err = syntheticDeviceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return syntheticDeviceObj, err
	}

	return syntheticDeviceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SyntheticDevice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no synthetic_devices provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syntheticDeviceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	syntheticDeviceInsertCacheMut.RLock()
	cache, cached := syntheticDeviceInsertCache[key]
	syntheticDeviceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			syntheticDeviceAllColumns,
			syntheticDeviceColumnsWithDefault,
			syntheticDeviceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(syntheticDeviceType, syntheticDeviceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(syntheticDeviceType, syntheticDeviceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"identity_api\".\"synthetic_devices\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"identity_api\".\"synthetic_devices\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into synthetic_devices")
	}

	if !cached {
		syntheticDeviceInsertCacheMut.Lock()
		syntheticDeviceInsertCache[key] = cache
		syntheticDeviceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SyntheticDevice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SyntheticDevice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	syntheticDeviceUpdateCacheMut.RLock()
	cache, cached := syntheticDeviceUpdateCache[key]
	syntheticDeviceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			syntheticDeviceAllColumns,
			syntheticDevicePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update synthetic_devices, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"identity_api\".\"synthetic_devices\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, syntheticDevicePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(syntheticDeviceType, syntheticDeviceMapping, append(wl, syntheticDevicePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update synthetic_devices row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for synthetic_devices")
	}

	if !cached {
		syntheticDeviceUpdateCacheMut.Lock()
		syntheticDeviceUpdateCache[key] = cache
		syntheticDeviceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q syntheticDeviceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for synthetic_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for synthetic_devices")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SyntheticDeviceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syntheticDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"identity_api\".\"synthetic_devices\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, syntheticDevicePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in syntheticDevice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all syntheticDevice")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SyntheticDevice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no synthetic_devices provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(syntheticDeviceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	syntheticDeviceUpsertCacheMut.RLock()
	cache, cached := syntheticDeviceUpsertCache[key]
	syntheticDeviceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			syntheticDeviceAllColumns,
			syntheticDeviceColumnsWithDefault,
			syntheticDeviceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			syntheticDeviceAllColumns,
			syntheticDevicePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert synthetic_devices, could not build update column list")
		}

		ret := strmangle.SetComplement(syntheticDeviceAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(syntheticDevicePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert synthetic_devices, could not build conflict column list")
			}

			conflict = make([]string, len(syntheticDevicePrimaryKeyColumns))
			copy(conflict, syntheticDevicePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"identity_api\".\"synthetic_devices\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(syntheticDeviceType, syntheticDeviceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(syntheticDeviceType, syntheticDeviceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert synthetic_devices")
	}

	if !cached {
		syntheticDeviceUpsertCacheMut.Lock()
		syntheticDeviceUpsertCache[key] = cache
		syntheticDeviceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single SyntheticDevice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SyntheticDevice) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SyntheticDevice provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), syntheticDevicePrimaryKeyMapping)
	sql := "DELETE FROM \"identity_api\".\"synthetic_devices\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from synthetic_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for synthetic_devices")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q syntheticDeviceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no syntheticDeviceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from synthetic_devices")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for synthetic_devices")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SyntheticDeviceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(syntheticDeviceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syntheticDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"identity_api\".\"synthetic_devices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syntheticDevicePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from syntheticDevice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for synthetic_devices")
	}

	if len(syntheticDeviceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SyntheticDevice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSyntheticDevice(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SyntheticDeviceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SyntheticDeviceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), syntheticDevicePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"identity_api\".\"synthetic_devices\".* FROM \"identity_api\".\"synthetic_devices\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, syntheticDevicePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SyntheticDeviceSlice")
	}

	*o = slice

	return nil
}

// SyntheticDeviceExists checks if the SyntheticDevice row exists.
func SyntheticDeviceExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"identity_api\".\"synthetic_devices\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if synthetic_devices exists")
	}

	return exists, nil
}

// Exists checks if the SyntheticDevice row exists.
func (o *SyntheticDevice) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SyntheticDeviceExists(ctx, exec, o.ID)
}
