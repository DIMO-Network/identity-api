// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// KernelAccount is an object representing the database table.
type KernelAccount struct {
	Kernel       []byte `boil:"kernel" json:"kernel" toml:"kernel" yaml:"kernel"`
	OwnerAddress []byte `boil:"owner_address" json:"owner_address" toml:"owner_address" yaml:"owner_address"`

	R *kernelAccountR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L kernelAccountL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var KernelAccountColumns = struct {
	Kernel       string
	OwnerAddress string
}{
	Kernel:       "kernel",
	OwnerAddress: "owner_address",
}

var KernelAccountTableColumns = struct {
	Kernel       string
	OwnerAddress string
}{
	Kernel:       "kernel_accounts.kernel",
	OwnerAddress: "kernel_accounts.owner_address",
}

// Generated where

var KernelAccountWhere = struct {
	Kernel       whereHelper__byte
	OwnerAddress whereHelper__byte
}{
	Kernel:       whereHelper__byte{field: "\"identity_api\".\"kernel_accounts\".\"kernel\""},
	OwnerAddress: whereHelper__byte{field: "\"identity_api\".\"kernel_accounts\".\"owner_address\""},
}

// KernelAccountRels is where relationship names are stored.
var KernelAccountRels = struct {
}{}

// kernelAccountR is where relationships are stored.
type kernelAccountR struct {
}

// NewStruct creates a new relationship struct
func (*kernelAccountR) NewStruct() *kernelAccountR {
	return &kernelAccountR{}
}

// kernelAccountL is where Load methods for each relationship are stored.
type kernelAccountL struct{}

var (
	kernelAccountAllColumns            = []string{"kernel", "owner_address"}
	kernelAccountColumnsWithoutDefault = []string{"kernel", "owner_address"}
	kernelAccountColumnsWithDefault    = []string{}
	kernelAccountPrimaryKeyColumns     = []string{"kernel"}
	kernelAccountGeneratedColumns      = []string{}
)

type (
	// KernelAccountSlice is an alias for a slice of pointers to KernelAccount.
	// This should almost always be used instead of []KernelAccount.
	KernelAccountSlice []*KernelAccount
	// KernelAccountHook is the signature for custom KernelAccount hook methods
	KernelAccountHook func(context.Context, boil.ContextExecutor, *KernelAccount) error

	kernelAccountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	kernelAccountType                 = reflect.TypeOf(&KernelAccount{})
	kernelAccountMapping              = queries.MakeStructMapping(kernelAccountType)
	kernelAccountPrimaryKeyMapping, _ = queries.BindMapping(kernelAccountType, kernelAccountMapping, kernelAccountPrimaryKeyColumns)
	kernelAccountInsertCacheMut       sync.RWMutex
	kernelAccountInsertCache          = make(map[string]insertCache)
	kernelAccountUpdateCacheMut       sync.RWMutex
	kernelAccountUpdateCache          = make(map[string]updateCache)
	kernelAccountUpsertCacheMut       sync.RWMutex
	kernelAccountUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var kernelAccountAfterSelectMu sync.Mutex
var kernelAccountAfterSelectHooks []KernelAccountHook

var kernelAccountBeforeInsertMu sync.Mutex
var kernelAccountBeforeInsertHooks []KernelAccountHook
var kernelAccountAfterInsertMu sync.Mutex
var kernelAccountAfterInsertHooks []KernelAccountHook

var kernelAccountBeforeUpdateMu sync.Mutex
var kernelAccountBeforeUpdateHooks []KernelAccountHook
var kernelAccountAfterUpdateMu sync.Mutex
var kernelAccountAfterUpdateHooks []KernelAccountHook

var kernelAccountBeforeDeleteMu sync.Mutex
var kernelAccountBeforeDeleteHooks []KernelAccountHook
var kernelAccountAfterDeleteMu sync.Mutex
var kernelAccountAfterDeleteHooks []KernelAccountHook

var kernelAccountBeforeUpsertMu sync.Mutex
var kernelAccountBeforeUpsertHooks []KernelAccountHook
var kernelAccountAfterUpsertMu sync.Mutex
var kernelAccountAfterUpsertHooks []KernelAccountHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *KernelAccount) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kernelAccountAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *KernelAccount) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kernelAccountBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *KernelAccount) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kernelAccountAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *KernelAccount) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kernelAccountBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *KernelAccount) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kernelAccountAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *KernelAccount) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kernelAccountBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *KernelAccount) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kernelAccountAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *KernelAccount) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kernelAccountBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *KernelAccount) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range kernelAccountAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddKernelAccountHook registers your hook function for all future operations.
func AddKernelAccountHook(hookPoint boil.HookPoint, kernelAccountHook KernelAccountHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		kernelAccountAfterSelectMu.Lock()
		kernelAccountAfterSelectHooks = append(kernelAccountAfterSelectHooks, kernelAccountHook)
		kernelAccountAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		kernelAccountBeforeInsertMu.Lock()
		kernelAccountBeforeInsertHooks = append(kernelAccountBeforeInsertHooks, kernelAccountHook)
		kernelAccountBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		kernelAccountAfterInsertMu.Lock()
		kernelAccountAfterInsertHooks = append(kernelAccountAfterInsertHooks, kernelAccountHook)
		kernelAccountAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		kernelAccountBeforeUpdateMu.Lock()
		kernelAccountBeforeUpdateHooks = append(kernelAccountBeforeUpdateHooks, kernelAccountHook)
		kernelAccountBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		kernelAccountAfterUpdateMu.Lock()
		kernelAccountAfterUpdateHooks = append(kernelAccountAfterUpdateHooks, kernelAccountHook)
		kernelAccountAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		kernelAccountBeforeDeleteMu.Lock()
		kernelAccountBeforeDeleteHooks = append(kernelAccountBeforeDeleteHooks, kernelAccountHook)
		kernelAccountBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		kernelAccountAfterDeleteMu.Lock()
		kernelAccountAfterDeleteHooks = append(kernelAccountAfterDeleteHooks, kernelAccountHook)
		kernelAccountAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		kernelAccountBeforeUpsertMu.Lock()
		kernelAccountBeforeUpsertHooks = append(kernelAccountBeforeUpsertHooks, kernelAccountHook)
		kernelAccountBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		kernelAccountAfterUpsertMu.Lock()
		kernelAccountAfterUpsertHooks = append(kernelAccountAfterUpsertHooks, kernelAccountHook)
		kernelAccountAfterUpsertMu.Unlock()
	}
}

// One returns a single kernelAccount record from the query.
func (q kernelAccountQuery) One(ctx context.Context, exec boil.ContextExecutor) (*KernelAccount, error) {
	o := &KernelAccount{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for kernel_accounts")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all KernelAccount records from the query.
func (q kernelAccountQuery) All(ctx context.Context, exec boil.ContextExecutor) (KernelAccountSlice, error) {
	var o []*KernelAccount

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to KernelAccount slice")
	}

	if len(kernelAccountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all KernelAccount records in the query.
func (q kernelAccountQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count kernel_accounts rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q kernelAccountQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if kernel_accounts exists")
	}

	return count > 0, nil
}

// KernelAccounts retrieves all the records using an executor.
func KernelAccounts(mods ...qm.QueryMod) kernelAccountQuery {
	mods = append(mods, qm.From("\"identity_api\".\"kernel_accounts\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"identity_api\".\"kernel_accounts\".*"})
	}

	return kernelAccountQuery{q}
}

// FindKernelAccount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindKernelAccount(ctx context.Context, exec boil.ContextExecutor, kernel []byte, selectCols ...string) (*KernelAccount, error) {
	kernelAccountObj := &KernelAccount{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"identity_api\".\"kernel_accounts\" where \"kernel\"=$1", sel,
	)

	q := queries.Raw(query, kernel)

	err := q.Bind(ctx, exec, kernelAccountObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from kernel_accounts")
	}

	if err = kernelAccountObj.doAfterSelectHooks(ctx, exec); err != nil {
		return kernelAccountObj, err
	}

	return kernelAccountObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *KernelAccount) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no kernel_accounts provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(kernelAccountColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	kernelAccountInsertCacheMut.RLock()
	cache, cached := kernelAccountInsertCache[key]
	kernelAccountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			kernelAccountAllColumns,
			kernelAccountColumnsWithDefault,
			kernelAccountColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(kernelAccountType, kernelAccountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(kernelAccountType, kernelAccountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"identity_api\".\"kernel_accounts\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"identity_api\".\"kernel_accounts\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into kernel_accounts")
	}

	if !cached {
		kernelAccountInsertCacheMut.Lock()
		kernelAccountInsertCache[key] = cache
		kernelAccountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the KernelAccount.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *KernelAccount) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	kernelAccountUpdateCacheMut.RLock()
	cache, cached := kernelAccountUpdateCache[key]
	kernelAccountUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			kernelAccountAllColumns,
			kernelAccountPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update kernel_accounts, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"identity_api\".\"kernel_accounts\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, kernelAccountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(kernelAccountType, kernelAccountMapping, append(wl, kernelAccountPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update kernel_accounts row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for kernel_accounts")
	}

	if !cached {
		kernelAccountUpdateCacheMut.Lock()
		kernelAccountUpdateCache[key] = cache
		kernelAccountUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q kernelAccountQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for kernel_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for kernel_accounts")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o KernelAccountSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), kernelAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"identity_api\".\"kernel_accounts\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, kernelAccountPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in kernelAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all kernelAccount")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *KernelAccount) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no kernel_accounts provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(kernelAccountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	kernelAccountUpsertCacheMut.RLock()
	cache, cached := kernelAccountUpsertCache[key]
	kernelAccountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			kernelAccountAllColumns,
			kernelAccountColumnsWithDefault,
			kernelAccountColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			kernelAccountAllColumns,
			kernelAccountPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert kernel_accounts, could not build update column list")
		}

		ret := strmangle.SetComplement(kernelAccountAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(kernelAccountPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert kernel_accounts, could not build conflict column list")
			}

			conflict = make([]string, len(kernelAccountPrimaryKeyColumns))
			copy(conflict, kernelAccountPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"identity_api\".\"kernel_accounts\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(kernelAccountType, kernelAccountMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(kernelAccountType, kernelAccountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert kernel_accounts")
	}

	if !cached {
		kernelAccountUpsertCacheMut.Lock()
		kernelAccountUpsertCache[key] = cache
		kernelAccountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single KernelAccount record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *KernelAccount) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no KernelAccount provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), kernelAccountPrimaryKeyMapping)
	sql := "DELETE FROM \"identity_api\".\"kernel_accounts\" WHERE \"kernel\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from kernel_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for kernel_accounts")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q kernelAccountQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no kernelAccountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from kernel_accounts")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for kernel_accounts")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o KernelAccountSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(kernelAccountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), kernelAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"identity_api\".\"kernel_accounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, kernelAccountPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from kernelAccount slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for kernel_accounts")
	}

	if len(kernelAccountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *KernelAccount) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindKernelAccount(ctx, exec, o.Kernel)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *KernelAccountSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := KernelAccountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), kernelAccountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"identity_api\".\"kernel_accounts\".* FROM \"identity_api\".\"kernel_accounts\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, kernelAccountPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in KernelAccountSlice")
	}

	*o = slice

	return nil
}

// KernelAccountExists checks if the KernelAccount row exists.
func KernelAccountExists(ctx context.Context, exec boil.ContextExecutor, kernel []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"identity_api\".\"kernel_accounts\" where \"kernel\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, kernel)
	}
	row := exec.QueryRowContext(ctx, sql, kernel)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if kernel_accounts exists")
	}

	return exists, nil
}

// Exists checks if the KernelAccount row exists.
func (o *KernelAccount) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return KernelAccountExists(ctx, exec, o.Kernel)
}
