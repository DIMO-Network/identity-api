// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Manufacturer is an object representing the database table.
type Manufacturer struct {
	ID       int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name     string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Owner    []byte    `boil:"owner" json:"owner" toml:"owner" yaml:"owner"`
	MintedAt time.Time `boil:"minted_at" json:"minted_at" toml:"minted_at" yaml:"minted_at"`

	R *manufacturerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L manufacturerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ManufacturerColumns = struct {
	ID       string
	Name     string
	Owner    string
	MintedAt string
}{
	ID:       "id",
	Name:     "name",
	Owner:    "owner",
	MintedAt: "minted_at",
}

var ManufacturerTableColumns = struct {
	ID       string
	Name     string
	Owner    string
	MintedAt string
}{
	ID:       "manufacturers.id",
	Name:     "manufacturers.name",
	Owner:    "manufacturers.owner",
	MintedAt: "manufacturers.minted_at",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod   { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var ManufacturerWhere = struct {
	ID       whereHelperint
	Name     whereHelperstring
	Owner    whereHelper__byte
	MintedAt whereHelpertime_Time
}{
	ID:       whereHelperint{field: "\"identity_api\".\"manufacturers\".\"id\""},
	Name:     whereHelperstring{field: "\"identity_api\".\"manufacturers\".\"name\""},
	Owner:    whereHelper__byte{field: "\"identity_api\".\"manufacturers\".\"owner\""},
	MintedAt: whereHelpertime_Time{field: "\"identity_api\".\"manufacturers\".\"minted_at\""},
}

// ManufacturerRels is where relationship names are stored.
var ManufacturerRels = struct {
	AftermarketDevices string
	Vehicles           string
}{
	AftermarketDevices: "AftermarketDevices",
	Vehicles:           "Vehicles",
}

// manufacturerR is where relationships are stored.
type manufacturerR struct {
	AftermarketDevices AftermarketDeviceSlice `boil:"AftermarketDevices" json:"AftermarketDevices" toml:"AftermarketDevices" yaml:"AftermarketDevices"`
	Vehicles           VehicleSlice           `boil:"Vehicles" json:"Vehicles" toml:"Vehicles" yaml:"Vehicles"`
}

// NewStruct creates a new relationship struct
func (*manufacturerR) NewStruct() *manufacturerR {
	return &manufacturerR{}
}

func (r *manufacturerR) GetAftermarketDevices() AftermarketDeviceSlice {
	if r == nil {
		return nil
	}
	return r.AftermarketDevices
}

func (r *manufacturerR) GetVehicles() VehicleSlice {
	if r == nil {
		return nil
	}
	return r.Vehicles
}

// manufacturerL is where Load methods for each relationship are stored.
type manufacturerL struct{}

var (
	manufacturerAllColumns            = []string{"id", "name", "owner", "minted_at"}
	manufacturerColumnsWithoutDefault = []string{"id", "name", "owner", "minted_at"}
	manufacturerColumnsWithDefault    = []string{}
	manufacturerPrimaryKeyColumns     = []string{"id"}
	manufacturerGeneratedColumns      = []string{}
)

type (
	// ManufacturerSlice is an alias for a slice of pointers to Manufacturer.
	// This should almost always be used instead of []Manufacturer.
	ManufacturerSlice []*Manufacturer
	// ManufacturerHook is the signature for custom Manufacturer hook methods
	ManufacturerHook func(context.Context, boil.ContextExecutor, *Manufacturer) error

	manufacturerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	manufacturerType                 = reflect.TypeOf(&Manufacturer{})
	manufacturerMapping              = queries.MakeStructMapping(manufacturerType)
	manufacturerPrimaryKeyMapping, _ = queries.BindMapping(manufacturerType, manufacturerMapping, manufacturerPrimaryKeyColumns)
	manufacturerInsertCacheMut       sync.RWMutex
	manufacturerInsertCache          = make(map[string]insertCache)
	manufacturerUpdateCacheMut       sync.RWMutex
	manufacturerUpdateCache          = make(map[string]updateCache)
	manufacturerUpsertCacheMut       sync.RWMutex
	manufacturerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var manufacturerAfterSelectMu sync.Mutex
var manufacturerAfterSelectHooks []ManufacturerHook

var manufacturerBeforeInsertMu sync.Mutex
var manufacturerBeforeInsertHooks []ManufacturerHook
var manufacturerAfterInsertMu sync.Mutex
var manufacturerAfterInsertHooks []ManufacturerHook

var manufacturerBeforeUpdateMu sync.Mutex
var manufacturerBeforeUpdateHooks []ManufacturerHook
var manufacturerAfterUpdateMu sync.Mutex
var manufacturerAfterUpdateHooks []ManufacturerHook

var manufacturerBeforeDeleteMu sync.Mutex
var manufacturerBeforeDeleteHooks []ManufacturerHook
var manufacturerAfterDeleteMu sync.Mutex
var manufacturerAfterDeleteHooks []ManufacturerHook

var manufacturerBeforeUpsertMu sync.Mutex
var manufacturerBeforeUpsertHooks []ManufacturerHook
var manufacturerAfterUpsertMu sync.Mutex
var manufacturerAfterUpsertHooks []ManufacturerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Manufacturer) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range manufacturerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Manufacturer) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range manufacturerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Manufacturer) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range manufacturerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Manufacturer) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range manufacturerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Manufacturer) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range manufacturerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Manufacturer) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range manufacturerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Manufacturer) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range manufacturerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Manufacturer) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range manufacturerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Manufacturer) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range manufacturerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddManufacturerHook registers your hook function for all future operations.
func AddManufacturerHook(hookPoint boil.HookPoint, manufacturerHook ManufacturerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		manufacturerAfterSelectMu.Lock()
		manufacturerAfterSelectHooks = append(manufacturerAfterSelectHooks, manufacturerHook)
		manufacturerAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		manufacturerBeforeInsertMu.Lock()
		manufacturerBeforeInsertHooks = append(manufacturerBeforeInsertHooks, manufacturerHook)
		manufacturerBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		manufacturerAfterInsertMu.Lock()
		manufacturerAfterInsertHooks = append(manufacturerAfterInsertHooks, manufacturerHook)
		manufacturerAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		manufacturerBeforeUpdateMu.Lock()
		manufacturerBeforeUpdateHooks = append(manufacturerBeforeUpdateHooks, manufacturerHook)
		manufacturerBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		manufacturerAfterUpdateMu.Lock()
		manufacturerAfterUpdateHooks = append(manufacturerAfterUpdateHooks, manufacturerHook)
		manufacturerAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		manufacturerBeforeDeleteMu.Lock()
		manufacturerBeforeDeleteHooks = append(manufacturerBeforeDeleteHooks, manufacturerHook)
		manufacturerBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		manufacturerAfterDeleteMu.Lock()
		manufacturerAfterDeleteHooks = append(manufacturerAfterDeleteHooks, manufacturerHook)
		manufacturerAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		manufacturerBeforeUpsertMu.Lock()
		manufacturerBeforeUpsertHooks = append(manufacturerBeforeUpsertHooks, manufacturerHook)
		manufacturerBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		manufacturerAfterUpsertMu.Lock()
		manufacturerAfterUpsertHooks = append(manufacturerAfterUpsertHooks, manufacturerHook)
		manufacturerAfterUpsertMu.Unlock()
	}
}

// One returns a single manufacturer record from the query.
func (q manufacturerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Manufacturer, error) {
	o := &Manufacturer{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for manufacturers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Manufacturer records from the query.
func (q manufacturerQuery) All(ctx context.Context, exec boil.ContextExecutor) (ManufacturerSlice, error) {
	var o []*Manufacturer

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Manufacturer slice")
	}

	if len(manufacturerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Manufacturer records in the query.
func (q manufacturerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count manufacturers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q manufacturerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if manufacturers exists")
	}

	return count > 0, nil
}

// AftermarketDevices retrieves all the aftermarket_device's AftermarketDevices with an executor.
func (o *Manufacturer) AftermarketDevices(mods ...qm.QueryMod) aftermarketDeviceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"identity_api\".\"aftermarket_devices\".\"manufacturer_id\"=?", o.ID),
	)

	return AftermarketDevices(queryMods...)
}

// Vehicles retrieves all the vehicle's Vehicles with an executor.
func (o *Manufacturer) Vehicles(mods ...qm.QueryMod) vehicleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"identity_api\".\"vehicles\".\"manufacturer_id\"=?", o.ID),
	)

	return Vehicles(queryMods...)
}

// LoadAftermarketDevices allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (manufacturerL) LoadAftermarketDevices(ctx context.Context, e boil.ContextExecutor, singular bool, maybeManufacturer interface{}, mods queries.Applicator) error {
	var slice []*Manufacturer
	var object *Manufacturer

	if singular {
		var ok bool
		object, ok = maybeManufacturer.(*Manufacturer)
		if !ok {
			object = new(Manufacturer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeManufacturer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeManufacturer))
			}
		}
	} else {
		s, ok := maybeManufacturer.(*[]*Manufacturer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeManufacturer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeManufacturer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &manufacturerR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &manufacturerR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`identity_api.aftermarket_devices`),
		qm.WhereIn(`identity_api.aftermarket_devices.manufacturer_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load aftermarket_devices")
	}

	var resultSlice []*AftermarketDevice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice aftermarket_devices")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on aftermarket_devices")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for aftermarket_devices")
	}

	if len(aftermarketDeviceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AftermarketDevices = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &aftermarketDeviceR{}
			}
			foreign.R.Manufacturer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ManufacturerID) {
				local.R.AftermarketDevices = append(local.R.AftermarketDevices, foreign)
				if foreign.R == nil {
					foreign.R = &aftermarketDeviceR{}
				}
				foreign.R.Manufacturer = local
				break
			}
		}
	}

	return nil
}

// LoadVehicles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (manufacturerL) LoadVehicles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeManufacturer interface{}, mods queries.Applicator) error {
	var slice []*Manufacturer
	var object *Manufacturer

	if singular {
		var ok bool
		object, ok = maybeManufacturer.(*Manufacturer)
		if !ok {
			object = new(Manufacturer)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeManufacturer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeManufacturer))
			}
		}
	} else {
		s, ok := maybeManufacturer.(*[]*Manufacturer)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeManufacturer)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeManufacturer))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &manufacturerR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &manufacturerR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`identity_api.vehicles`),
		qm.WhereIn(`identity_api.vehicles.manufacturer_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load vehicles")
	}

	var resultSlice []*Vehicle
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice vehicles")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on vehicles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for vehicles")
	}

	if len(vehicleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Vehicles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &vehicleR{}
			}
			foreign.R.Manufacturer = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ManufacturerID {
				local.R.Vehicles = append(local.R.Vehicles, foreign)
				if foreign.R == nil {
					foreign.R = &vehicleR{}
				}
				foreign.R.Manufacturer = local
				break
			}
		}
	}

	return nil
}

// AddAftermarketDevices adds the given related objects to the existing relationships
// of the manufacturer, optionally inserting them as new records.
// Appends related to o.R.AftermarketDevices.
// Sets related.R.Manufacturer appropriately.
func (o *Manufacturer) AddAftermarketDevices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AftermarketDevice) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ManufacturerID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"identity_api\".\"aftermarket_devices\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"manufacturer_id"}),
				strmangle.WhereClause("\"", "\"", 2, aftermarketDevicePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ManufacturerID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &manufacturerR{
			AftermarketDevices: related,
		}
	} else {
		o.R.AftermarketDevices = append(o.R.AftermarketDevices, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &aftermarketDeviceR{
				Manufacturer: o,
			}
		} else {
			rel.R.Manufacturer = o
		}
	}
	return nil
}

// SetAftermarketDevices removes all previously related items of the
// manufacturer replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Manufacturer's AftermarketDevices accordingly.
// Replaces o.R.AftermarketDevices with related.
// Sets related.R.Manufacturer's AftermarketDevices accordingly.
func (o *Manufacturer) SetAftermarketDevices(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AftermarketDevice) error {
	query := "update \"identity_api\".\"aftermarket_devices\" set \"manufacturer_id\" = null where \"manufacturer_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.AftermarketDevices {
			queries.SetScanner(&rel.ManufacturerID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.Manufacturer = nil
		}
		o.R.AftermarketDevices = nil
	}

	return o.AddAftermarketDevices(ctx, exec, insert, related...)
}

// RemoveAftermarketDevices relationships from objects passed in.
// Removes related items from R.AftermarketDevices (uses pointer comparison, removal does not keep order)
// Sets related.R.Manufacturer.
func (o *Manufacturer) RemoveAftermarketDevices(ctx context.Context, exec boil.ContextExecutor, related ...*AftermarketDevice) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ManufacturerID, nil)
		if rel.R != nil {
			rel.R.Manufacturer = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("manufacturer_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.AftermarketDevices {
			if rel != ri {
				continue
			}

			ln := len(o.R.AftermarketDevices)
			if ln > 1 && i < ln-1 {
				o.R.AftermarketDevices[i] = o.R.AftermarketDevices[ln-1]
			}
			o.R.AftermarketDevices = o.R.AftermarketDevices[:ln-1]
			break
		}
	}

	return nil
}

// AddVehicles adds the given related objects to the existing relationships
// of the manufacturer, optionally inserting them as new records.
// Appends related to o.R.Vehicles.
// Sets related.R.Manufacturer appropriately.
func (o *Manufacturer) AddVehicles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Vehicle) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ManufacturerID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"identity_api\".\"vehicles\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"manufacturer_id"}),
				strmangle.WhereClause("\"", "\"", 2, vehiclePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ManufacturerID = o.ID
		}
	}

	if o.R == nil {
		o.R = &manufacturerR{
			Vehicles: related,
		}
	} else {
		o.R.Vehicles = append(o.R.Vehicles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &vehicleR{
				Manufacturer: o,
			}
		} else {
			rel.R.Manufacturer = o
		}
	}
	return nil
}

// Manufacturers retrieves all the records using an executor.
func Manufacturers(mods ...qm.QueryMod) manufacturerQuery {
	mods = append(mods, qm.From("\"identity_api\".\"manufacturers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"identity_api\".\"manufacturers\".*"})
	}

	return manufacturerQuery{q}
}

// FindManufacturer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindManufacturer(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*Manufacturer, error) {
	manufacturerObj := &Manufacturer{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"identity_api\".\"manufacturers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, manufacturerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from manufacturers")
	}

	if err = manufacturerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return manufacturerObj, err
	}

	return manufacturerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Manufacturer) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no manufacturers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(manufacturerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	manufacturerInsertCacheMut.RLock()
	cache, cached := manufacturerInsertCache[key]
	manufacturerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			manufacturerAllColumns,
			manufacturerColumnsWithDefault,
			manufacturerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(manufacturerType, manufacturerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(manufacturerType, manufacturerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"identity_api\".\"manufacturers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"identity_api\".\"manufacturers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into manufacturers")
	}

	if !cached {
		manufacturerInsertCacheMut.Lock()
		manufacturerInsertCache[key] = cache
		manufacturerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Manufacturer.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Manufacturer) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	manufacturerUpdateCacheMut.RLock()
	cache, cached := manufacturerUpdateCache[key]
	manufacturerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			manufacturerAllColumns,
			manufacturerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update manufacturers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"identity_api\".\"manufacturers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, manufacturerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(manufacturerType, manufacturerMapping, append(wl, manufacturerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update manufacturers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for manufacturers")
	}

	if !cached {
		manufacturerUpdateCacheMut.Lock()
		manufacturerUpdateCache[key] = cache
		manufacturerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q manufacturerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for manufacturers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for manufacturers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ManufacturerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), manufacturerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"identity_api\".\"manufacturers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, manufacturerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in manufacturer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all manufacturer")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Manufacturer) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no manufacturers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(manufacturerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	manufacturerUpsertCacheMut.RLock()
	cache, cached := manufacturerUpsertCache[key]
	manufacturerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			manufacturerAllColumns,
			manufacturerColumnsWithDefault,
			manufacturerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			manufacturerAllColumns,
			manufacturerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert manufacturers, could not build update column list")
		}

		ret := strmangle.SetComplement(manufacturerAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(manufacturerPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert manufacturers, could not build conflict column list")
			}

			conflict = make([]string, len(manufacturerPrimaryKeyColumns))
			copy(conflict, manufacturerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"identity_api\".\"manufacturers\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(manufacturerType, manufacturerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(manufacturerType, manufacturerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert manufacturers")
	}

	if !cached {
		manufacturerUpsertCacheMut.Lock()
		manufacturerUpsertCache[key] = cache
		manufacturerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Manufacturer record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Manufacturer) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Manufacturer provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), manufacturerPrimaryKeyMapping)
	sql := "DELETE FROM \"identity_api\".\"manufacturers\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from manufacturers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for manufacturers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q manufacturerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no manufacturerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from manufacturers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for manufacturers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ManufacturerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(manufacturerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), manufacturerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"identity_api\".\"manufacturers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, manufacturerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from manufacturer slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for manufacturers")
	}

	if len(manufacturerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Manufacturer) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindManufacturer(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ManufacturerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ManufacturerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), manufacturerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"identity_api\".\"manufacturers\".* FROM \"identity_api\".\"manufacturers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, manufacturerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ManufacturerSlice")
	}

	*o = slice

	return nil
}

// ManufacturerExists checks if the Manufacturer row exists.
func ManufacturerExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"identity_api\".\"manufacturers\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if manufacturers exists")
	}

	return exists, nil
}

// Exists checks if the Manufacturer row exists.
func (o *Manufacturer) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ManufacturerExists(ctx, exec, o.ID)
}
